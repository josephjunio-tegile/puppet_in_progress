=begin
#Tegile IntelliFlassh WEB API

#WEB API for managing Tegile IntelliFlash Arrays.

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0-SNAPSHOT

=end

require "uri"

module IFClient
  class DataApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Creates a project
    # 
    # @param create_project_param 
    # @param [Hash] opts the optional parameters
    # @return [COMMANDSTATUS]
    def create_project_post(create_project_param, opts = {})
      data, _status_code, _headers = create_project_post_with_http_info(create_project_param, opts)
      return data
    end

    # Creates a project
    # 
    # @param create_project_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(COMMANDSTATUS, Fixnum, Hash)>] COMMANDSTATUS data, response status code and response headers
    def create_project_post_with_http_info(create_project_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DataApi.create_project_post ..."
      end
      # verify the required parameter 'create_project_param' is set
      if @api_client.config.client_side_validation && create_project_param.nil?
        fail ArgumentError, "Missing the required parameter 'create_project_param' when calling DataApi.create_project_post"
      end
      # resource path
      local_var_path = "/createProject"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_project_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'COMMANDSTATUS')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#create_project_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a share with the specified share options and share permissions.
    # 
    # @param create_share_param 
    # @param [Hash] opts the optional parameters
    # @return [COMMANDSTATUS]
    def create_share_post(create_share_param, opts = {})
      data, _status_code, _headers = create_share_post_with_http_info(create_share_param, opts)
      return data
    end

    # Creates a share with the specified share options and share permissions.
    # 
    # @param create_share_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(COMMANDSTATUS, Fixnum, Hash)>] COMMANDSTATUS data, response status code and response headers
    def create_share_post_with_http_info(create_share_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DataApi.create_share_post ..."
      end
      # verify the required parameter 'create_share_param' is set
      if @api_client.config.client_side_validation && create_share_param.nil?
        fail ArgumentError, "Missing the required parameter 'create_share_param' when calling DataApi.create_share_post"
      end
      # resource path
      local_var_path = "/createShare"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_share_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'COMMANDSTATUS')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#create_share_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a volume with the specified settings.
    # 
    # @param create_volume_param 
    # @param [Hash] opts the optional parameters
    # @return [COMMANDSTATUS]
    def create_volume_post(create_volume_param, opts = {})
      data, _status_code, _headers = create_volume_post_with_http_info(create_volume_param, opts)
      return data
    end

    # Creates a volume with the specified settings.
    # 
    # @param create_volume_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(COMMANDSTATUS, Fixnum, Hash)>] COMMANDSTATUS data, response status code and response headers
    def create_volume_post_with_http_info(create_volume_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DataApi.create_volume_post ..."
      end
      # verify the required parameter 'create_volume_param' is set
      if @api_client.config.client_side_validation && create_volume_param.nil?
        fail ArgumentError, "Missing the required parameter 'create_volume_param' when calling DataApi.create_volume_post"
      end
      # resource path
      local_var_path = "/createVolume"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_volume_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'COMMANDSTATUS')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#create_volume_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes the specified dataset.
    # 
    # @param delete_dataset_param 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_dataset_post(delete_dataset_param, opts = {})
      delete_dataset_post_with_http_info(delete_dataset_param, opts)
      return nil
    end

    # Deletes the specified dataset.
    # 
    # @param delete_dataset_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_dataset_post_with_http_info(delete_dataset_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DataApi.delete_dataset_post ..."
      end
      # verify the required parameter 'delete_dataset_param' is set
      if @api_client.config.client_side_validation && delete_dataset_param.nil?
        fail ArgumentError, "Missing the required parameter 'delete_dataset_param' when calling DataApi.delete_dataset_post"
      end
      # resource path
      local_var_path = "/deleteDataset"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(delete_dataset_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#delete_dataset_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes the specified share, and optionally, any dependents of the share.
    # 
    # @param delete_share_param 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_share_post(delete_share_param, opts = {})
      delete_share_post_with_http_info(delete_share_param, opts)
      return nil
    end

    # Deletes the specified share, and optionally, any dependents of the share.
    # 
    # @param delete_share_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_share_post_with_http_info(delete_share_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DataApi.delete_share_post ..."
      end
      # verify the required parameter 'delete_share_param' is set
      if @api_client.config.client_side_validation && delete_share_param.nil?
        fail ArgumentError, "Missing the required parameter 'delete_share_param' when calling DataApi.delete_share_post"
      end
      # resource path
      local_var_path = "/deleteShare"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(delete_share_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#delete_share_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes the specified volume, and optionally, any dependents of the volume.
    # 
    # @param delete_volume_param 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_volume_post(delete_volume_param, opts = {})
      delete_volume_post_with_http_info(delete_volume_param, opts)
      return nil
    end

    # Deletes the specified volume, and optionally, any dependents of the volume.
    # 
    # @param delete_volume_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_volume_post_with_http_info(delete_volume_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DataApi.delete_volume_post ..."
      end
      # verify the required parameter 'delete_volume_param' is set
      if @api_client.config.client_side_validation && delete_volume_param.nil?
        fail ArgumentError, "Missing the required parameter 'delete_volume_param' when calling DataApi.delete_volume_post"
      end
      # resource path
      local_var_path = "/deleteVolume"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(delete_volume_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#delete_volume_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the Project details.
    # 
    # @param get_project_param 
    # @param [Hash] opts the optional parameters
    # @return [ProjectV21]
    def get_project_post(get_project_param, opts = {})
      data, _status_code, _headers = get_project_post_with_http_info(get_project_param, opts)
      return data
    end

    # Get the Project details.
    # 
    # @param get_project_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectV21, Fixnum, Hash)>] ProjectV21 data, response status code and response headers
    def get_project_post_with_http_info(get_project_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DataApi.get_project_post ..."
      end
      # verify the required parameter 'get_project_param' is set
      if @api_client.config.client_side_validation && get_project_param.nil?
        fail ArgumentError, "Missing the required parameter 'get_project_param' when calling DataApi.get_project_post"
      end
      # resource path
      local_var_path = "/getProject"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(get_project_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProjectV21')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#get_project_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the Share details.
    # 
    # @param get_share_param 
    # @param [Hash] opts the optional parameters
    # @return [ShareV21]
    def get_share_post(get_share_param, opts = {})
      data, _status_code, _headers = get_share_post_with_http_info(get_share_param, opts)
      return data
    end

    # Get the Share details.
    # 
    # @param get_share_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ShareV21, Fixnum, Hash)>] ShareV21 data, response status code and response headers
    def get_share_post_with_http_info(get_share_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DataApi.get_share_post ..."
      end
      # verify the required parameter 'get_share_param' is set
      if @api_client.config.client_side_validation && get_share_param.nil?
        fail ArgumentError, "Missing the required parameter 'get_share_param' when calling DataApi.get_share_post"
      end
      # resource path
      local_var_path = "/getShare"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(get_share_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShareV21')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#get_share_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the Volume details.
    # 
    # @param get_volume_param 
    # @param [Hash] opts the optional parameters
    # @return [VolumeV21]
    def get_volume_post(get_volume_param, opts = {})
      data, _status_code, _headers = get_volume_post_with_http_info(get_volume_param, opts)
      return data
    end

    # Get the Volume details.
    # 
    # @param get_volume_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VolumeV21, Fixnum, Hash)>] VolumeV21 data, response status code and response headers
    def get_volume_post_with_http_info(get_volume_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DataApi.get_volume_post ..."
      end
      # verify the required parameter 'get_volume_param' is set
      if @api_client.config.client_side_validation && get_volume_param.nil?
        fail ArgumentError, "Missing the required parameter 'get_volume_param' when calling DataApi.get_volume_post"
      end
      # resource path
      local_var_path = "/getVolume"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(get_volume_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VolumeV21')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#get_volume_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Inherit properties from parent project settings (revert/rollback to parent setting)
    # 
    # @param inherit_property_from_project_param 
    # @param [Hash] opts the optional parameters
    # @return [COMMANDSTATUS]
    def inherit_property_from_project_post(inherit_property_from_project_param, opts = {})
      data, _status_code, _headers = inherit_property_from_project_post_with_http_info(inherit_property_from_project_param, opts)
      return data
    end

    # Inherit properties from parent project settings (revert/rollback to parent setting)
    # 
    # @param inherit_property_from_project_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(COMMANDSTATUS, Fixnum, Hash)>] COMMANDSTATUS data, response status code and response headers
    def inherit_property_from_project_post_with_http_info(inherit_property_from_project_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DataApi.inherit_property_from_project_post ..."
      end
      # verify the required parameter 'inherit_property_from_project_param' is set
      if @api_client.config.client_side_validation && inherit_property_from_project_param.nil?
        fail ArgumentError, "Missing the required parameter 'inherit_property_from_project_param' when calling DataApi.inherit_property_from_project_post"
      end
      # resource path
      local_var_path = "/inheritPropertyFromProject"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(inherit_property_from_project_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'COMMANDSTATUS')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#inherit_property_from_project_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists LUN details for the specified LUN IDs.
    # 
    # @param list_luns_by_id_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<LunStatus>]
    def list_luns_by_id_post(list_luns_by_id_param, opts = {})
      data, _status_code, _headers = list_luns_by_id_post_with_http_info(list_luns_by_id_param, opts)
      return data
    end

    # Lists LUN details for the specified LUN IDs.
    # 
    # @param list_luns_by_id_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<LunStatus>, Fixnum, Hash)>] Array<LunStatus> data, response status code and response headers
    def list_luns_by_id_post_with_http_info(list_luns_by_id_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DataApi.list_luns_by_id_post ..."
      end
      # verify the required parameter 'list_luns_by_id_param' is set
      if @api_client.config.client_side_validation && list_luns_by_id_param.nil?
        fail ArgumentError, "Missing the required parameter 'list_luns_by_id_param' when calling DataApi.list_luns_by_id_post"
      end
      # resource path
      local_var_path = "/listLunsById"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(list_luns_by_id_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<LunStatus>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#list_luns_by_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists all the pools on the Tegile array
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<PoolV10>]
    def list_pools_get(opts = {})
      data, _status_code, _headers = list_pools_get_with_http_info(opts)
      return data
    end

    # Lists all the pools on the Tegile array
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PoolV10>, Fixnum, Hash)>] Array<PoolV10> data, response status code and response headers
    def list_pools_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DataApi.list_pools_get ..."
      end
      # resource path
      local_var_path = "/listPools"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<PoolV10>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#list_pools_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists all the local or replicated projects in a pool.
    # 
    # @param list_projects_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<ProjectV10>]
    def list_projects_post(list_projects_param, opts = {})
      data, _status_code, _headers = list_projects_post_with_http_info(list_projects_param, opts)
      return data
    end

    # Lists all the local or replicated projects in a pool.
    # 
    # @param list_projects_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ProjectV10>, Fixnum, Hash)>] Array<ProjectV10> data, response status code and response headers
    def list_projects_post_with_http_info(list_projects_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DataApi.list_projects_post ..."
      end
      # verify the required parameter 'list_projects_param' is set
      if @api_client.config.client_side_validation && list_projects_param.nil?
        fail ArgumentError, "Missing the required parameter 'list_projects_param' when calling DataApi.list_projects_post"
      end
      # resource path
      local_var_path = "/listProjects"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(list_projects_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ProjectV10>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#list_projects_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists all the local and replicated shares in a project.
    # 
    # @param list_shares_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<ShareV10>]
    def list_shares_post(list_shares_param, opts = {})
      data, _status_code, _headers = list_shares_post_with_http_info(list_shares_param, opts)
      return data
    end

    # Lists all the local and replicated shares in a project.
    # 
    # @param list_shares_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ShareV10>, Fixnum, Hash)>] Array<ShareV10> data, response status code and response headers
    def list_shares_post_with_http_info(list_shares_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DataApi.list_shares_post ..."
      end
      # verify the required parameter 'list_shares_param' is set
      if @api_client.config.client_side_validation && list_shares_param.nil?
        fail ArgumentError, "Missing the required parameter 'list_shares_param' when calling DataApi.list_shares_post"
      end
      # resource path
      local_var_path = "/listShares"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(list_shares_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ShareV10>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#list_shares_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists all the local or replicated volumes within a Project.
    # 
    # @param list_volumes_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<VolumeV10>]
    def list_volumes_post(list_volumes_param, opts = {})
      data, _status_code, _headers = list_volumes_post_with_http_info(list_volumes_param, opts)
      return data
    end

    # Lists all the local or replicated volumes within a Project.
    # 
    # @param list_volumes_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<VolumeV10>, Fixnum, Hash)>] Array<VolumeV10> data, response status code and response headers
    def list_volumes_post_with_http_info(list_volumes_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DataApi.list_volumes_post ..."
      end
      # verify the required parameter 'list_volumes_param' is set
      if @api_client.config.client_side_validation && list_volumes_param.nil?
        fail ArgumentError, "Missing the required parameter 'list_volumes_param' when calling DataApi.list_volumes_post"
      end
      # resource path
      local_var_path = "/listVolumes"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(list_volumes_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<VolumeV10>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#list_volumes_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Modify value of a subset of Project properties
    # 
    # @param modify_project_properties_param 
    # @param [Hash] opts the optional parameters
    # @return [COMMANDSTATUS]
    def modify_project_properties_post(modify_project_properties_param, opts = {})
      data, _status_code, _headers = modify_project_properties_post_with_http_info(modify_project_properties_param, opts)
      return data
    end

    # Modify value of a subset of Project properties
    # 
    # @param modify_project_properties_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(COMMANDSTATUS, Fixnum, Hash)>] COMMANDSTATUS data, response status code and response headers
    def modify_project_properties_post_with_http_info(modify_project_properties_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DataApi.modify_project_properties_post ..."
      end
      # verify the required parameter 'modify_project_properties_param' is set
      if @api_client.config.client_side_validation && modify_project_properties_param.nil?
        fail ArgumentError, "Missing the required parameter 'modify_project_properties_param' when calling DataApi.modify_project_properties_post"
      end
      # resource path
      local_var_path = "/modifyProjectProperties"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(modify_project_properties_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'COMMANDSTATUS')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#modify_project_properties_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Modify value of a subset of project properties
    # 
    # @param modify_share_properties_param 
    # @param [Hash] opts the optional parameters
    # @return [COMMANDSTATUS]
    def modify_share_properties_post(modify_share_properties_param, opts = {})
      data, _status_code, _headers = modify_share_properties_post_with_http_info(modify_share_properties_param, opts)
      return data
    end

    # Modify value of a subset of project properties
    # 
    # @param modify_share_properties_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(COMMANDSTATUS, Fixnum, Hash)>] COMMANDSTATUS data, response status code and response headers
    def modify_share_properties_post_with_http_info(modify_share_properties_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DataApi.modify_share_properties_post ..."
      end
      # verify the required parameter 'modify_share_properties_param' is set
      if @api_client.config.client_side_validation && modify_share_properties_param.nil?
        fail ArgumentError, "Missing the required parameter 'modify_share_properties_param' when calling DataApi.modify_share_properties_post"
      end
      # resource path
      local_var_path = "/modifyShareProperties"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(modify_share_properties_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'COMMANDSTATUS')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#modify_share_properties_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Modify value of a subset of Volume properties
    # 
    # @param modify_volume_properties_param 
    # @param [Hash] opts the optional parameters
    # @return [COMMANDSTATUS]
    def modify_volume_properties_post(modify_volume_properties_param, opts = {})
      data, _status_code, _headers = modify_volume_properties_post_with_http_info(modify_volume_properties_param, opts)
      return data
    end

    # Modify value of a subset of Volume properties
    # 
    # @param modify_volume_properties_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(COMMANDSTATUS, Fixnum, Hash)>] COMMANDSTATUS data, response status code and response headers
    def modify_volume_properties_post_with_http_info(modify_volume_properties_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DataApi.modify_volume_properties_post ..."
      end
      # verify the required parameter 'modify_volume_properties_param' is set
      if @api_client.config.client_side_validation && modify_volume_properties_param.nil?
        fail ArgumentError, "Missing the required parameter 'modify_volume_properties_param' when calling DataApi.modify_volume_properties_post"
      end
      # resource path
      local_var_path = "/modifyVolumeProperties"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(modify_volume_properties_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'COMMANDSTATUS')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#modify_volume_properties_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
