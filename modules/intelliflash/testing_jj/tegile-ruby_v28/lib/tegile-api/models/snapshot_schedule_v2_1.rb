=begin
#Tegile IntelliFlassh WEB API

#WEB API for managing Tegile IntelliFlash Arrays.

OpenAPI spec version: 2.2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0-SNAPSHOT

=end

require 'date'

module IFClient

  class SnapshotSchedule_V2_1
    # Schedule ID, read-only.
    attr_accessor :schedule_id

    # Maximum period to retain snapshots Schedule Interval Type | Retention Period Unit     Minutes             | Days     Hourly              | Days     Daily               | Weeks     Weekly              | Months     Monthly             | Years 
    attr_accessor :retention_period

    # Type of schedule interval, possible values are  Minute, Hour, Day, Week, Month 
    attr_accessor :schedule_interval_type

    # How often the schedule should recur    Schedule Interval Type | Retention Interval      Minutes             | in Minutes      Hourly              | in Hours      Daily               | in Days      Weekly              | in Weeks      Monthly             | in Months 
    attr_accessor :repeat_interval

    # Start Date for scheduling a snapshot in future. Should be specified in YYYY-MM-DD format. Start date can be either current date or a date in future. 
    attr_accessor :start_date

    # FIXME--- check Date format Start time for the schedule, should be in 24HR HH:MM format. The date can not be a past date. 
    attr_accessor :start_time

    # End time for the schedule, should be in 24HR HH:MM format. This is applicable only for Minutes and Hourly Schedule  interval types. 
    attr_accessor :end_time

    # Days of the Week This is for the Weekly Schedule interval types Should be specified in comma-separated numbers and each number specifying day of the week.  Sunday:1, Monday:2, Tuesday:3 and so on.  E.g   For Weekdays Only      : 2,3,4,5,6   For Weekend Only       : 1,7   For Mon-Wednesday only : 2,4 
    attr_accessor :days_of_week

    # Day of the Month This is for the Monthly Schedule interval types and the value indicates the date of each month when the schedule should be run.  If the specified date does not exist in the next month, the job will  not run and will be scheduled to next month, depending on the repeat  interval specified. E.g, Not each month has 31st, so the job will be skipped for those  months.  Either this field or weekdayOfMonth can be specified, not both 
    attr_accessor :day_of_month

    # Weekday of the Month, should be in W:D format. This is for the Monthly Schedule interval types. Sunday:1, Monday:2, Tuesday:3 and so on. E.g.   2nd Monday of the Month   : 2:2  4th Thursday of the Month : 4:5  This field could also contain the value \"LAST\" to indicate for  the job to run on last day of the month.  Either this field or the dayOfWeek can be specified, not both 
    attr_accessor :weekday_of_month

    # Dataset path, can be a a project, LUN or a share Should not be a replica dataset. 
    attr_accessor :dataset_path

    # Quiesce \"on\" or \"off\"
    attr_accessor :quiesce


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'schedule_id' => :'scheduleId',
        :'retention_period' => :'retentionPeriod',
        :'schedule_interval_type' => :'scheduleIntervalType',
        :'repeat_interval' => :'repeatInterval',
        :'start_date' => :'startDate',
        :'start_time' => :'startTime',
        :'end_time' => :'endTime',
        :'days_of_week' => :'daysOfWeek',
        :'day_of_month' => :'dayOfMonth',
        :'weekday_of_month' => :'weekdayOfMonth',
        :'dataset_path' => :'datasetPath',
        :'quiesce' => :'quiesce'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'schedule_id' => :'Integer',
        :'retention_period' => :'Integer',
        :'schedule_interval_type' => :'String',
        :'repeat_interval' => :'Integer',
        :'start_date' => :'String',
        :'start_time' => :'String',
        :'end_time' => :'String',
        :'days_of_week' => :'String',
        :'day_of_month' => :'Integer',
        :'weekday_of_month' => :'String',
        :'dataset_path' => :'String',
        :'quiesce' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'scheduleId')
        self.schedule_id = attributes[:'scheduleId']
      end

      if attributes.has_key?(:'retentionPeriod')
        self.retention_period = attributes[:'retentionPeriod']
      end

      if attributes.has_key?(:'scheduleIntervalType')
        self.schedule_interval_type = attributes[:'scheduleIntervalType']
      end

      if attributes.has_key?(:'repeatInterval')
        self.repeat_interval = attributes[:'repeatInterval']
      end

      if attributes.has_key?(:'startDate')
        self.start_date = attributes[:'startDate']
      end

      if attributes.has_key?(:'startTime')
        self.start_time = attributes[:'startTime']
      end

      if attributes.has_key?(:'endTime')
        self.end_time = attributes[:'endTime']
      end

      if attributes.has_key?(:'daysOfWeek')
        self.days_of_week = attributes[:'daysOfWeek']
      end

      if attributes.has_key?(:'dayOfMonth')
        self.day_of_month = attributes[:'dayOfMonth']
      end

      if attributes.has_key?(:'weekdayOfMonth')
        self.weekday_of_month = attributes[:'weekdayOfMonth']
      end

      if attributes.has_key?(:'datasetPath')
        self.dataset_path = attributes[:'datasetPath']
      end

      if attributes.has_key?(:'quiesce')
        self.quiesce = attributes[:'quiesce']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          schedule_id == o.schedule_id &&
          retention_period == o.retention_period &&
          schedule_interval_type == o.schedule_interval_type &&
          repeat_interval == o.repeat_interval &&
          start_date == o.start_date &&
          start_time == o.start_time &&
          end_time == o.end_time &&
          days_of_week == o.days_of_week &&
          day_of_month == o.day_of_month &&
          weekday_of_month == o.weekday_of_month &&
          dataset_path == o.dataset_path &&
          quiesce == o.quiesce
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [schedule_id, retention_period, schedule_interval_type, repeat_interval, start_date, start_time, end_time, days_of_week, day_of_month, weekday_of_month, dataset_path, quiesce].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = IFClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
