=begin
#Tegile IntelliFlassh WEB API

#WEB API for managing Tegile IntelliFlash Arrays.

OpenAPI spec version: 2.2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0-SNAPSHOT

=end

require "uri"

module IFClient
  class SnapshotApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Clones the specified project-level snapshot. This creates new datasets at the share and volume levels for all shares and volumes that have a snapshot with the specified name.
    # 
    # @param clone_project_snapshot_param 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def clone_project_snapshot_post(clone_project_snapshot_param, opts = {})
      clone_project_snapshot_post_with_http_info(clone_project_snapshot_param, opts)
      return nil
    end

    # Clones the specified project-level snapshot. This creates new datasets at the share and volume levels for all shares and volumes that have a snapshot with the specified name.
    # 
    # @param clone_project_snapshot_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def clone_project_snapshot_post_with_http_info(clone_project_snapshot_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SnapshotApi.clone_project_snapshot_post ..."
      end
      # verify the required parameter 'clone_project_snapshot_param' is set
      if @api_client.config.client_side_validation && clone_project_snapshot_param.nil?
        fail ArgumentError, "Missing the required parameter 'clone_project_snapshot_param' when calling SnapshotApi.clone_project_snapshot_post"
      end
      # resource path
      local_var_path = "/cloneProjectSnapshot"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(clone_project_snapshot_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnapshotApi#clone_project_snapshot_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Clones the specified share-level snapshot.
    # 
    # @param clone_share_snapshot_param 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def clone_share_snapshot_post(clone_share_snapshot_param, opts = {})
      clone_share_snapshot_post_with_http_info(clone_share_snapshot_param, opts)
      return nil
    end

    # Clones the specified share-level snapshot.
    # 
    # @param clone_share_snapshot_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def clone_share_snapshot_post_with_http_info(clone_share_snapshot_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SnapshotApi.clone_share_snapshot_post ..."
      end
      # verify the required parameter 'clone_share_snapshot_param' is set
      if @api_client.config.client_side_validation && clone_share_snapshot_param.nil?
        fail ArgumentError, "Missing the required parameter 'clone_share_snapshot_param' when calling SnapshotApi.clone_share_snapshot_post"
      end
      # resource path
      local_var_path = "/cloneShareSnapshot"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(clone_share_snapshot_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnapshotApi#clone_share_snapshot_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Clones the specified snapshot of a volume.
    # 
    # @param clone_volume_snapshot_param 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def clone_volume_snapshot_post(clone_volume_snapshot_param, opts = {})
      clone_volume_snapshot_post_with_http_info(clone_volume_snapshot_param, opts)
      return nil
    end

    # Clones the specified snapshot of a volume.
    # 
    # @param clone_volume_snapshot_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def clone_volume_snapshot_post_with_http_info(clone_volume_snapshot_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SnapshotApi.clone_volume_snapshot_post ..."
      end
      # verify the required parameter 'clone_volume_snapshot_param' is set
      if @api_client.config.client_side_validation && clone_volume_snapshot_param.nil?
        fail ArgumentError, "Missing the required parameter 'clone_volume_snapshot_param' when calling SnapshotApi.clone_volume_snapshot_post"
      end
      # resource path
      local_var_path = "/cloneVolumeSnapshot"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(clone_volume_snapshot_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnapshotApi#clone_volume_snapshot_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Recursively creates snapshots of the specified project and the datasets within the project. The string \"Manual-P-\" is prefixed to the names of the snapshots created.
    # 
    # @param create_project_snapshot_param 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_project_snapshot_post(create_project_snapshot_param, opts = {})
      create_project_snapshot_post_with_http_info(create_project_snapshot_param, opts)
      return nil
    end

    # Recursively creates snapshots of the specified project and the datasets within the project. The string \&quot;Manual-P-\&quot; is prefixed to the names of the snapshots created.
    # 
    # @param create_project_snapshot_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_project_snapshot_post_with_http_info(create_project_snapshot_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SnapshotApi.create_project_snapshot_post ..."
      end
      # verify the required parameter 'create_project_snapshot_param' is set
      if @api_client.config.client_side_validation && create_project_snapshot_param.nil?
        fail ArgumentError, "Missing the required parameter 'create_project_snapshot_param' when calling SnapshotApi.create_project_snapshot_post"
      end
      # resource path
      local_var_path = "/createProjectSnapshot"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_project_snapshot_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnapshotApi#create_project_snapshot_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Recursively creates snapshot of the specified share. The string \"Manual-S-\" is prefixed to names of the snapshots created.
    # 
    # @param create_share_snapshot_param 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_share_snapshot_post(create_share_snapshot_param, opts = {})
      create_share_snapshot_post_with_http_info(create_share_snapshot_param, opts)
      return nil
    end

    # Recursively creates snapshot of the specified share. The string \&quot;Manual-S-\&quot; is prefixed to names of the snapshots created.
    # 
    # @param create_share_snapshot_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_share_snapshot_post_with_http_info(create_share_snapshot_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SnapshotApi.create_share_snapshot_post ..."
      end
      # verify the required parameter 'create_share_snapshot_param' is set
      if @api_client.config.client_side_validation && create_share_snapshot_param.nil?
        fail ArgumentError, "Missing the required parameter 'create_share_snapshot_param' when calling SnapshotApi.create_share_snapshot_post"
      end
      # resource path
      local_var_path = "/createShareSnapshot"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_share_snapshot_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnapshotApi#create_share_snapshot_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create snapshot schedule for a project, exclude pre-defined snapshot schedules
    # 
    # @param create_snapshot_schedule_param 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_snapshot_schedule_post(create_snapshot_schedule_param, opts = {})
      create_snapshot_schedule_post_with_http_info(create_snapshot_schedule_param, opts)
      return nil
    end

    # Create snapshot schedule for a project, exclude pre-defined snapshot schedules
    # 
    # @param create_snapshot_schedule_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_snapshot_schedule_post_with_http_info(create_snapshot_schedule_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SnapshotApi.create_snapshot_schedule_post ..."
      end
      # verify the required parameter 'create_snapshot_schedule_param' is set
      if @api_client.config.client_side_validation && create_snapshot_schedule_param.nil?
        fail ArgumentError, "Missing the required parameter 'create_snapshot_schedule_param' when calling SnapshotApi.create_snapshot_schedule_post"
      end
      # resource path
      local_var_path = "/createSnapshotSchedule"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_snapshot_schedule_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnapshotApi#create_snapshot_schedule_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Recursively creates snapshot of the specified volume. The string \"Manual-V-\" is prefixed to the names of the snapshots created.
    # 
    # @param create_volume_snapshot_param 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_volume_snapshot_post(create_volume_snapshot_param, opts = {})
      create_volume_snapshot_post_with_http_info(create_volume_snapshot_param, opts)
      return nil
    end

    # Recursively creates snapshot of the specified volume. The string \&quot;Manual-V-\&quot; is prefixed to the names of the snapshots created.
    # 
    # @param create_volume_snapshot_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_volume_snapshot_post_with_http_info(create_volume_snapshot_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SnapshotApi.create_volume_snapshot_post ..."
      end
      # verify the required parameter 'create_volume_snapshot_param' is set
      if @api_client.config.client_side_validation && create_volume_snapshot_param.nil?
        fail ArgumentError, "Missing the required parameter 'create_volume_snapshot_param' when calling SnapshotApi.create_volume_snapshot_post"
      end
      # resource path
      local_var_path = "/createVolumeSnapshot"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_volume_snapshot_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnapshotApi#create_volume_snapshot_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes the specified project snapshot.
    # 
    # @param delete_project_snapshot_param 
    # @param [Hash] opts the optional parameters
    # @return [SnapShotDeletionStatus]
    def delete_project_snapshot_post(delete_project_snapshot_param, opts = {})
      data, _status_code, _headers = delete_project_snapshot_post_with_http_info(delete_project_snapshot_param, opts)
      return data
    end

    # Deletes the specified project snapshot.
    # 
    # @param delete_project_snapshot_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SnapShotDeletionStatus, Fixnum, Hash)>] SnapShotDeletionStatus data, response status code and response headers
    def delete_project_snapshot_post_with_http_info(delete_project_snapshot_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SnapshotApi.delete_project_snapshot_post ..."
      end
      # verify the required parameter 'delete_project_snapshot_param' is set
      if @api_client.config.client_side_validation && delete_project_snapshot_param.nil?
        fail ArgumentError, "Missing the required parameter 'delete_project_snapshot_param' when calling SnapshotApi.delete_project_snapshot_post"
      end
      # resource path
      local_var_path = "/deleteProjectSnapshot"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(delete_project_snapshot_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SnapShotDeletionStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnapshotApi#delete_project_snapshot_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes the specified share snapshot.
    # 
    # @param delete_share_snapshot_param 
    # @param [Hash] opts the optional parameters
    # @return [SnapShotDeletionStatus]
    def delete_share_snapshot_post(delete_share_snapshot_param, opts = {})
      data, _status_code, _headers = delete_share_snapshot_post_with_http_info(delete_share_snapshot_param, opts)
      return data
    end

    # Deletes the specified share snapshot.
    # 
    # @param delete_share_snapshot_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SnapShotDeletionStatus, Fixnum, Hash)>] SnapShotDeletionStatus data, response status code and response headers
    def delete_share_snapshot_post_with_http_info(delete_share_snapshot_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SnapshotApi.delete_share_snapshot_post ..."
      end
      # verify the required parameter 'delete_share_snapshot_param' is set
      if @api_client.config.client_side_validation && delete_share_snapshot_param.nil?
        fail ArgumentError, "Missing the required parameter 'delete_share_snapshot_param' when calling SnapshotApi.delete_share_snapshot_post"
      end
      # resource path
      local_var_path = "/deleteShareSnapshot"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(delete_share_snapshot_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SnapShotDeletionStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnapshotApi#delete_share_snapshot_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete the snapshot schedule on that path with snapshotSuffix.
    # 
    # @param delete_snapshot_schedule_param 
    # @param [Hash] opts the optional parameters
    # @return [COMMAND_STATUS]
    def delete_snapshot_schedule_post(delete_snapshot_schedule_param, opts = {})
      data, _status_code, _headers = delete_snapshot_schedule_post_with_http_info(delete_snapshot_schedule_param, opts)
      return data
    end

    # Delete the snapshot schedule on that path with snapshotSuffix.
    # 
    # @param delete_snapshot_schedule_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(COMMAND_STATUS, Fixnum, Hash)>] COMMAND_STATUS data, response status code and response headers
    def delete_snapshot_schedule_post_with_http_info(delete_snapshot_schedule_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SnapshotApi.delete_snapshot_schedule_post ..."
      end
      # verify the required parameter 'delete_snapshot_schedule_param' is set
      if @api_client.config.client_side_validation && delete_snapshot_schedule_param.nil?
        fail ArgumentError, "Missing the required parameter 'delete_snapshot_schedule_param' when calling SnapshotApi.delete_snapshot_schedule_post"
      end
      # resource path
      local_var_path = "/deleteSnapshotSchedule"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(delete_snapshot_schedule_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'COMMAND_STATUS')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnapshotApi#delete_snapshot_schedule_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete all snapshot schedules for the specified dataset
    # 
    # @param delete_snapshot_schedules_param 
    # @param [Hash] opts the optional parameters
    # @return [COMMAND_STATUS]
    def delete_snapshot_schedules_post(delete_snapshot_schedules_param, opts = {})
      data, _status_code, _headers = delete_snapshot_schedules_post_with_http_info(delete_snapshot_schedules_param, opts)
      return data
    end

    # Delete all snapshot schedules for the specified dataset
    # 
    # @param delete_snapshot_schedules_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(COMMAND_STATUS, Fixnum, Hash)>] COMMAND_STATUS data, response status code and response headers
    def delete_snapshot_schedules_post_with_http_info(delete_snapshot_schedules_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SnapshotApi.delete_snapshot_schedules_post ..."
      end
      # verify the required parameter 'delete_snapshot_schedules_param' is set
      if @api_client.config.client_side_validation && delete_snapshot_schedules_param.nil?
        fail ArgumentError, "Missing the required parameter 'delete_snapshot_schedules_param' when calling SnapshotApi.delete_snapshot_schedules_post"
      end
      # resource path
      local_var_path = "/deleteSnapshotSchedules"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(delete_snapshot_schedules_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'COMMAND_STATUS')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnapshotApi#delete_snapshot_schedules_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes the specified volume snapshot.
    # 
    # @param delete_volume_snapshot_param 
    # @param [Hash] opts the optional parameters
    # @return [SnapShotDeletionStatus]
    def delete_volume_snapshot_post(delete_volume_snapshot_param, opts = {})
      data, _status_code, _headers = delete_volume_snapshot_post_with_http_info(delete_volume_snapshot_param, opts)
      return data
    end

    # Deletes the specified volume snapshot.
    # 
    # @param delete_volume_snapshot_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SnapShotDeletionStatus, Fixnum, Hash)>] SnapShotDeletionStatus data, response status code and response headers
    def delete_volume_snapshot_post_with_http_info(delete_volume_snapshot_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SnapshotApi.delete_volume_snapshot_post ..."
      end
      # verify the required parameter 'delete_volume_snapshot_param' is set
      if @api_client.config.client_side_validation && delete_volume_snapshot_param.nil?
        fail ArgumentError, "Missing the required parameter 'delete_volume_snapshot_param' when calling SnapshotApi.delete_volume_snapshot_post"
      end
      # resource path
      local_var_path = "/deleteVolumeSnapshot"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(delete_volume_snapshot_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SnapShotDeletionStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnapshotApi#delete_volume_snapshot_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the status of a clone request on the specified project snapshot.
    # 
    # @param param 
    # @param [Hash] opts the optional parameters
    # @return [ProjectCloneProgressStatus_v1_2]
    def get_project_clone_status_post(param, opts = {})
      data, _status_code, _headers = get_project_clone_status_post_with_http_info(param, opts)
      return data
    end

    # Gets the status of a clone request on the specified project snapshot.
    # 
    # @param param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectCloneProgressStatus_v1_2, Fixnum, Hash)>] ProjectCloneProgressStatus_v1_2 data, response status code and response headers
    def get_project_clone_status_post_with_http_info(param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SnapshotApi.get_project_clone_status_post ..."
      end
      # verify the required parameter 'param' is set
      if @api_client.config.client_side_validation && param.nil?
        fail ArgumentError, "Missing the required parameter 'param' when calling SnapshotApi.get_project_clone_status_post"
      end
      # resource path
      local_var_path = "/getProjectCloneStatus"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProjectCloneProgressStatus_v1_2')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnapshotApi#get_project_clone_status_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the status of a project snapshot creation request.
    # 
    # @param get_project_snapshot_creation_status_param 
    # @param [Hash] opts the optional parameters
    # @return [SnapshotProgressStatus]
    def get_project_snapshot_creation_status_post(get_project_snapshot_creation_status_param, opts = {})
      data, _status_code, _headers = get_project_snapshot_creation_status_post_with_http_info(get_project_snapshot_creation_status_param, opts)
      return data
    end

    # Gets the status of a project snapshot creation request.
    # 
    # @param get_project_snapshot_creation_status_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SnapshotProgressStatus, Fixnum, Hash)>] SnapshotProgressStatus data, response status code and response headers
    def get_project_snapshot_creation_status_post_with_http_info(get_project_snapshot_creation_status_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SnapshotApi.get_project_snapshot_creation_status_post ..."
      end
      # verify the required parameter 'get_project_snapshot_creation_status_param' is set
      if @api_client.config.client_side_validation && get_project_snapshot_creation_status_param.nil?
        fail ArgumentError, "Missing the required parameter 'get_project_snapshot_creation_status_param' when calling SnapshotApi.get_project_snapshot_creation_status_post"
      end
      # resource path
      local_var_path = "/getProjectSnapshotCreationStatus"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(get_project_snapshot_creation_status_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SnapshotProgressStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnapshotApi#get_project_snapshot_creation_status_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the status of a share snapshot creation request.
    # 
    # @param get_share_snapshot_creation_status_param 
    # @param [Hash] opts the optional parameters
    # @return [SnapshotProgressStatus]
    def get_share_snapshot_creation_status_post(get_share_snapshot_creation_status_param, opts = {})
      data, _status_code, _headers = get_share_snapshot_creation_status_post_with_http_info(get_share_snapshot_creation_status_param, opts)
      return data
    end

    # Gets the status of a share snapshot creation request.
    # 
    # @param get_share_snapshot_creation_status_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SnapshotProgressStatus, Fixnum, Hash)>] SnapshotProgressStatus data, response status code and response headers
    def get_share_snapshot_creation_status_post_with_http_info(get_share_snapshot_creation_status_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SnapshotApi.get_share_snapshot_creation_status_post ..."
      end
      # verify the required parameter 'get_share_snapshot_creation_status_param' is set
      if @api_client.config.client_side_validation && get_share_snapshot_creation_status_param.nil?
        fail ArgumentError, "Missing the required parameter 'get_share_snapshot_creation_status_param' when calling SnapshotApi.get_share_snapshot_creation_status_post"
      end
      # resource path
      local_var_path = "/getShareSnapshotCreationStatus"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(get_share_snapshot_creation_status_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SnapshotProgressStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnapshotApi#get_share_snapshot_creation_status_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get list of snapshot schedules for a dataset
    # 
    # @param get_snapshot_schedule_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<SnapshotSchedule_V2_1>]
    def get_snapshot_schedule_post(get_snapshot_schedule_param, opts = {})
      data, _status_code, _headers = get_snapshot_schedule_post_with_http_info(get_snapshot_schedule_param, opts)
      return data
    end

    # Get list of snapshot schedules for a dataset
    # 
    # @param get_snapshot_schedule_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<SnapshotSchedule_V2_1>, Fixnum, Hash)>] Array<SnapshotSchedule_V2_1> data, response status code and response headers
    def get_snapshot_schedule_post_with_http_info(get_snapshot_schedule_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SnapshotApi.get_snapshot_schedule_post ..."
      end
      # verify the required parameter 'get_snapshot_schedule_param' is set
      if @api_client.config.client_side_validation && get_snapshot_schedule_param.nil?
        fail ArgumentError, "Missing the required parameter 'get_snapshot_schedule_param' when calling SnapshotApi.get_snapshot_schedule_post"
      end
      # resource path
      local_var_path = "/getSnapshotSchedule"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(get_snapshot_schedule_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SnapshotSchedule_V2_1>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnapshotApi#get_snapshot_schedule_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the status of a volume snapshot creation request.
    # 
    # @param get_volume_snapshot_creation_status_param 
    # @param [Hash] opts the optional parameters
    # @return [SnapshotProgressStatus]
    def get_volume_snapshot_creation_status_post(get_volume_snapshot_creation_status_param, opts = {})
      data, _status_code, _headers = get_volume_snapshot_creation_status_post_with_http_info(get_volume_snapshot_creation_status_param, opts)
      return data
    end

    # Gets the status of a volume snapshot creation request.
    # 
    # @param get_volume_snapshot_creation_status_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SnapshotProgressStatus, Fixnum, Hash)>] SnapshotProgressStatus data, response status code and response headers
    def get_volume_snapshot_creation_status_post_with_http_info(get_volume_snapshot_creation_status_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SnapshotApi.get_volume_snapshot_creation_status_post ..."
      end
      # verify the required parameter 'get_volume_snapshot_creation_status_param' is set
      if @api_client.config.client_side_validation && get_volume_snapshot_creation_status_param.nil?
        fail ArgumentError, "Missing the required parameter 'get_volume_snapshot_creation_status_param' when calling SnapshotApi.get_volume_snapshot_creation_status_post"
      end
      # resource path
      local_var_path = "/getVolumeSnapshotCreationStatus"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(get_volume_snapshot_creation_status_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SnapshotProgressStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnapshotApi#get_volume_snapshot_creation_status_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Inherit project snapshot settings for local dataset
    # 
    # @param inherit_snapshot_settings_from_project_param 
    # @param [Hash] opts the optional parameters
    # @return [COMMAND_STATUS]
    def inherit_snapshot_settings_from_project_post(inherit_snapshot_settings_from_project_param, opts = {})
      data, _status_code, _headers = inherit_snapshot_settings_from_project_post_with_http_info(inherit_snapshot_settings_from_project_param, opts)
      return data
    end

    # Inherit project snapshot settings for local dataset
    # 
    # @param inherit_snapshot_settings_from_project_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(COMMAND_STATUS, Fixnum, Hash)>] COMMAND_STATUS data, response status code and response headers
    def inherit_snapshot_settings_from_project_post_with_http_info(inherit_snapshot_settings_from_project_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SnapshotApi.inherit_snapshot_settings_from_project_post ..."
      end
      # verify the required parameter 'inherit_snapshot_settings_from_project_param' is set
      if @api_client.config.client_side_validation && inherit_snapshot_settings_from_project_param.nil?
        fail ArgumentError, "Missing the required parameter 'inherit_snapshot_settings_from_project_param' when calling SnapshotApi.inherit_snapshot_settings_from_project_post"
      end
      # resource path
      local_var_path = "/inheritSnapshotSettingsFromProject"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(inherit_snapshot_settings_from_project_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'COMMAND_STATUS')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnapshotApi#inherit_snapshot_settings_from_project_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check if dataset is currently inheriting project snapshot settings
    # 
    # @param is_snapshot_schedules_inherited_from_project_param 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def is_snapshot_schedules_inherited_from_project_post(is_snapshot_schedules_inherited_from_project_param, opts = {})
      is_snapshot_schedules_inherited_from_project_post_with_http_info(is_snapshot_schedules_inherited_from_project_param, opts)
      return nil
    end

    # Check if dataset is currently inheriting project snapshot settings
    # 
    # @param is_snapshot_schedules_inherited_from_project_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def is_snapshot_schedules_inherited_from_project_post_with_http_info(is_snapshot_schedules_inherited_from_project_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SnapshotApi.is_snapshot_schedules_inherited_from_project_post ..."
      end
      # verify the required parameter 'is_snapshot_schedules_inherited_from_project_param' is set
      if @api_client.config.client_side_validation && is_snapshot_schedules_inherited_from_project_param.nil?
        fail ArgumentError, "Missing the required parameter 'is_snapshot_schedules_inherited_from_project_param' when calling SnapshotApi.is_snapshot_schedules_inherited_from_project_post"
      end
      # resource path
      local_var_path = "/isSnapshotSchedulesInheritedFromProject"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(is_snapshot_schedules_inherited_from_project_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnapshotApi#is_snapshot_schedules_inherited_from_project_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists names of snapshots (from the specified dataset) that match with the given regex pattern.
    # 
    # @param list_snapshots_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<String>]
    def list_snapshots_post(list_snapshots_param, opts = {})
      data, _status_code, _headers = list_snapshots_post_with_http_info(list_snapshots_param, opts)
      return data
    end

    # Lists names of snapshots (from the specified dataset) that match with the given regex pattern.
    # 
    # @param list_snapshots_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<String>, Fixnum, Hash)>] Array<String> data, response status code and response headers
    def list_snapshots_post_with_http_info(list_snapshots_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SnapshotApi.list_snapshots_post ..."
      end
      # verify the required parameter 'list_snapshots_param' is set
      if @api_client.config.client_side_validation && list_snapshots_param.nil?
        fail ArgumentError, "Missing the required parameter 'list_snapshots_param' when calling SnapshotApi.list_snapshots_post"
      end
      # resource path
      local_var_path = "/listSnapshots"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(list_snapshots_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<String>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnapshotApi#list_snapshots_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reverts the project state to the point-in-time state when the snapshot was taken.
    # 
    # @param roll_back_to_project_snapshot_param 
    # @param [Hash] opts the optional parameters
    # @return [COMMAND_STATUS]
    def roll_back_to_project_snapshot_post(roll_back_to_project_snapshot_param, opts = {})
      data, _status_code, _headers = roll_back_to_project_snapshot_post_with_http_info(roll_back_to_project_snapshot_param, opts)
      return data
    end

    # Reverts the project state to the point-in-time state when the snapshot was taken.
    # 
    # @param roll_back_to_project_snapshot_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(COMMAND_STATUS, Fixnum, Hash)>] COMMAND_STATUS data, response status code and response headers
    def roll_back_to_project_snapshot_post_with_http_info(roll_back_to_project_snapshot_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SnapshotApi.roll_back_to_project_snapshot_post ..."
      end
      # verify the required parameter 'roll_back_to_project_snapshot_param' is set
      if @api_client.config.client_side_validation && roll_back_to_project_snapshot_param.nil?
        fail ArgumentError, "Missing the required parameter 'roll_back_to_project_snapshot_param' when calling SnapshotApi.roll_back_to_project_snapshot_post"
      end
      # resource path
      local_var_path = "/rollBackToProjectSnapshot"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(roll_back_to_project_snapshot_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'COMMAND_STATUS')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnapshotApi#roll_back_to_project_snapshot_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reverts the share state to the point-in-time state when the snapshot was taken.
    # 
    # @param param 
    # @param [Hash] opts the optional parameters
    # @return [COMMAND_STATUS]
    def roll_back_to_share_snapshot_post(param, opts = {})
      data, _status_code, _headers = roll_back_to_share_snapshot_post_with_http_info(param, opts)
      return data
    end

    # Reverts the share state to the point-in-time state when the snapshot was taken.
    # 
    # @param param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(COMMAND_STATUS, Fixnum, Hash)>] COMMAND_STATUS data, response status code and response headers
    def roll_back_to_share_snapshot_post_with_http_info(param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SnapshotApi.roll_back_to_share_snapshot_post ..."
      end
      # verify the required parameter 'param' is set
      if @api_client.config.client_side_validation && param.nil?
        fail ArgumentError, "Missing the required parameter 'param' when calling SnapshotApi.roll_back_to_share_snapshot_post"
      end
      # resource path
      local_var_path = "/rollBackToShareSnapshot"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'COMMAND_STATUS')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnapshotApi#roll_back_to_share_snapshot_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reverts the volume state to the point-in-time state when the snapshot was taken.
    # 
    # @param roll_back_to_volume_snapshot_param 
    # @param [Hash] opts the optional parameters
    # @return [COMMAND_STATUS]
    def roll_back_to_volume_snapshot_post(roll_back_to_volume_snapshot_param, opts = {})
      data, _status_code, _headers = roll_back_to_volume_snapshot_post_with_http_info(roll_back_to_volume_snapshot_param, opts)
      return data
    end

    # Reverts the volume state to the point-in-time state when the snapshot was taken.
    # 
    # @param roll_back_to_volume_snapshot_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(COMMAND_STATUS, Fixnum, Hash)>] COMMAND_STATUS data, response status code and response headers
    def roll_back_to_volume_snapshot_post_with_http_info(roll_back_to_volume_snapshot_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SnapshotApi.roll_back_to_volume_snapshot_post ..."
      end
      # verify the required parameter 'roll_back_to_volume_snapshot_param' is set
      if @api_client.config.client_side_validation && roll_back_to_volume_snapshot_param.nil?
        fail ArgumentError, "Missing the required parameter 'roll_back_to_volume_snapshot_param' when calling SnapshotApi.roll_back_to_volume_snapshot_post"
      end
      # resource path
      local_var_path = "/rollBackToVolumeSnapshot"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(roll_back_to_volume_snapshot_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'COMMAND_STATUS')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnapshotApi#roll_back_to_volume_snapshot_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
