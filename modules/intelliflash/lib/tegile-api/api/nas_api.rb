=begin
#Tegile IntelliFlassh WEB API

#WEB API for managing Tegile IntelliFlash Arrays.

OpenAPI spec version: 2.2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0-SNAPSHOT

=end

require "uri"

module IFClient
  class NasApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Add network ACL to NFS Project
    # 
    # @param add_nfs_network_acl_on_project_param 
    # @param [Hash] opts the optional parameters
    # @return [COMMAND_STATUS]
    def add_nfs_network_acl_on_project_post(add_nfs_network_acl_on_project_param, opts = {})
      data, _status_code, _headers = add_nfs_network_acl_on_project_post_with_http_info(add_nfs_network_acl_on_project_param, opts)
      return data
    end

    # Add network ACL to NFS Project
    # 
    # @param add_nfs_network_acl_on_project_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(COMMAND_STATUS, Fixnum, Hash)>] COMMAND_STATUS data, response status code and response headers
    def add_nfs_network_acl_on_project_post_with_http_info(add_nfs_network_acl_on_project_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: NasApi.add_nfs_network_acl_on_project_post ..."
      end
      # verify the required parameter 'add_nfs_network_acl_on_project_param' is set
      if @api_client.config.client_side_validation && add_nfs_network_acl_on_project_param.nil?
        fail ArgumentError, "Missing the required parameter 'add_nfs_network_acl_on_project_param' when calling NasApi.add_nfs_network_acl_on_project_post"
      end
      # resource path
      local_var_path = "/addNFSNetworkACLOnProject"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(add_nfs_network_acl_on_project_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'COMMAND_STATUS')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NasApi#add_nfs_network_acl_on_project_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add network ACL to NFS share
    # 
    # @param add_nfs_network_acl_on_param 
    # @param [Hash] opts the optional parameters
    # @return [COMMAND_STATUS]
    def add_nfs_network_acl_on_share_post(add_nfs_network_acl_on_param, opts = {})
      data, _status_code, _headers = add_nfs_network_acl_on_share_post_with_http_info(add_nfs_network_acl_on_param, opts)
      return data
    end

    # Add network ACL to NFS share
    # 
    # @param add_nfs_network_acl_on_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(COMMAND_STATUS, Fixnum, Hash)>] COMMAND_STATUS data, response status code and response headers
    def add_nfs_network_acl_on_share_post_with_http_info(add_nfs_network_acl_on_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: NasApi.add_nfs_network_acl_on_share_post ..."
      end
      # verify the required parameter 'add_nfs_network_acl_on_param' is set
      if @api_client.config.client_side_validation && add_nfs_network_acl_on_param.nil?
        fail ArgumentError, "Missing the required parameter 'add_nfs_network_acl_on_param' when calling NasApi.add_nfs_network_acl_on_share_post"
      end
      # resource path
      local_var_path = "/addNFSNetworkACLOnShare"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(add_nfs_network_acl_on_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'COMMAND_STATUS')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NasApi#add_nfs_network_acl_on_share_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns all the Network ACLs for the NFS Project
    # 
    # @param get_nfs_network_ac_ls_on_project_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<NetworkACL_V2_1>]
    def get_nfs_network_ac_ls_on_project_post(get_nfs_network_ac_ls_on_project_param, opts = {})
      data, _status_code, _headers = get_nfs_network_ac_ls_on_project_post_with_http_info(get_nfs_network_ac_ls_on_project_param, opts)
      return data
    end

    # Returns all the Network ACLs for the NFS Project
    # 
    # @param get_nfs_network_ac_ls_on_project_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<NetworkACL_V2_1>, Fixnum, Hash)>] Array<NetworkACL_V2_1> data, response status code and response headers
    def get_nfs_network_ac_ls_on_project_post_with_http_info(get_nfs_network_ac_ls_on_project_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: NasApi.get_nfs_network_ac_ls_on_project_post ..."
      end
      # verify the required parameter 'get_nfs_network_ac_ls_on_project_param' is set
      if @api_client.config.client_side_validation && get_nfs_network_ac_ls_on_project_param.nil?
        fail ArgumentError, "Missing the required parameter 'get_nfs_network_ac_ls_on_project_param' when calling NasApi.get_nfs_network_ac_ls_on_project_post"
      end
      # resource path
      local_var_path = "/getNFSNetworkACLsOnProject"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(get_nfs_network_ac_ls_on_project_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<NetworkACL_V2_1>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NasApi#get_nfs_network_ac_ls_on_project_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns all the Network ACLs for the NFS share
    # 
    # @param get_nfs_network_ac_ls_on_share_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<NetworkACL_V2_1>]
    def get_nfs_network_ac_ls_on_share_post(get_nfs_network_ac_ls_on_share_param, opts = {})
      data, _status_code, _headers = get_nfs_network_ac_ls_on_share_post_with_http_info(get_nfs_network_ac_ls_on_share_param, opts)
      return data
    end

    # Returns all the Network ACLs for the NFS share
    # 
    # @param get_nfs_network_ac_ls_on_share_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<NetworkACL_V2_1>, Fixnum, Hash)>] Array<NetworkACL_V2_1> data, response status code and response headers
    def get_nfs_network_ac_ls_on_share_post_with_http_info(get_nfs_network_ac_ls_on_share_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: NasApi.get_nfs_network_ac_ls_on_share_post ..."
      end
      # verify the required parameter 'get_nfs_network_ac_ls_on_share_param' is set
      if @api_client.config.client_side_validation && get_nfs_network_ac_ls_on_share_param.nil?
        fail ArgumentError, "Missing the required parameter 'get_nfs_network_ac_ls_on_share_param' when calling NasApi.get_nfs_network_ac_ls_on_share_post"
      end
      # resource path
      local_var_path = "/getNFSNetworkACLsOnShare"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(get_nfs_network_ac_ls_on_share_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<NetworkACL_V2_1>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NasApi#get_nfs_network_ac_ls_on_share_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set the share property to inherit NFS or SMB ACL settings from project.
    # 
    # @param inherit_network_ac_lsettings_from_project_param 
    # @param [Hash] opts the optional parameters
    # @return [COMMAND_STATUS]
    def inherit_network_ac_lsettings_from_project_post(inherit_network_ac_lsettings_from_project_param, opts = {})
      data, _status_code, _headers = inherit_network_ac_lsettings_from_project_post_with_http_info(inherit_network_ac_lsettings_from_project_param, opts)
      return data
    end

    # Set the share property to inherit NFS or SMB ACL settings from project.
    # 
    # @param inherit_network_ac_lsettings_from_project_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(COMMAND_STATUS, Fixnum, Hash)>] COMMAND_STATUS data, response status code and response headers
    def inherit_network_ac_lsettings_from_project_post_with_http_info(inherit_network_ac_lsettings_from_project_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: NasApi.inherit_network_ac_lsettings_from_project_post ..."
      end
      # verify the required parameter 'inherit_network_ac_lsettings_from_project_param' is set
      if @api_client.config.client_side_validation && inherit_network_ac_lsettings_from_project_param.nil?
        fail ArgumentError, "Missing the required parameter 'inherit_network_ac_lsettings_from_project_param' when calling NasApi.inherit_network_ac_lsettings_from_project_post"
      end
      # resource path
      local_var_path = "/inheritNetworkACLsettingsFromProject"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(inherit_network_ac_lsettings_from_project_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'COMMAND_STATUS')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NasApi#inherit_network_ac_lsettings_from_project_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns whether the NFS protocol is enabled for the Project
    # 
    # @param is_project_exposed_over_nfs_param 
    # @param [Hash] opts the optional parameters
    # @return [BOOLEAN]
    def is_project_exposed_over_nfs_post(is_project_exposed_over_nfs_param, opts = {})
      data, _status_code, _headers = is_project_exposed_over_nfs_post_with_http_info(is_project_exposed_over_nfs_param, opts)
      return data
    end

    # Returns whether the NFS protocol is enabled for the Project
    # 
    # @param is_project_exposed_over_nfs_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BOOLEAN, Fixnum, Hash)>] BOOLEAN data, response status code and response headers
    def is_project_exposed_over_nfs_post_with_http_info(is_project_exposed_over_nfs_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: NasApi.is_project_exposed_over_nfs_post ..."
      end
      # verify the required parameter 'is_project_exposed_over_nfs_param' is set
      if @api_client.config.client_side_validation && is_project_exposed_over_nfs_param.nil?
        fail ArgumentError, "Missing the required parameter 'is_project_exposed_over_nfs_param' when calling NasApi.is_project_exposed_over_nfs_post"
      end
      # resource path
      local_var_path = "/isProjectExposedOverNFS"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(is_project_exposed_over_nfs_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BOOLEAN')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NasApi#is_project_exposed_over_nfs_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns whether the SMB protocol is enabled for the Project
    # 
    # @param is_project_exposed_over_smb_param 
    # @param [Hash] opts the optional parameters
    # @return [BOOLEAN]
    def is_project_exposed_over_smb_post(is_project_exposed_over_smb_param, opts = {})
      data, _status_code, _headers = is_project_exposed_over_smb_post_with_http_info(is_project_exposed_over_smb_param, opts)
      return data
    end

    # Returns whether the SMB protocol is enabled for the Project
    # 
    # @param is_project_exposed_over_smb_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BOOLEAN, Fixnum, Hash)>] BOOLEAN data, response status code and response headers
    def is_project_exposed_over_smb_post_with_http_info(is_project_exposed_over_smb_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: NasApi.is_project_exposed_over_smb_post ..."
      end
      # verify the required parameter 'is_project_exposed_over_smb_param' is set
      if @api_client.config.client_side_validation && is_project_exposed_over_smb_param.nil?
        fail ArgumentError, "Missing the required parameter 'is_project_exposed_over_smb_param' when calling NasApi.is_project_exposed_over_smb_post"
      end
      # resource path
      local_var_path = "/isProjectExposedOverSMB"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(is_project_exposed_over_smb_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BOOLEAN')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NasApi#is_project_exposed_over_smb_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns whether the NFS protocol is enabled for the share
    # 
    # @param is_share_exposed_over_nfs_param 
    # @param [Hash] opts the optional parameters
    # @return [BOOLEAN]
    def is_share_exposed_over_nfs_post(is_share_exposed_over_nfs_param, opts = {})
      data, _status_code, _headers = is_share_exposed_over_nfs_post_with_http_info(is_share_exposed_over_nfs_param, opts)
      return data
    end

    # Returns whether the NFS protocol is enabled for the share
    # 
    # @param is_share_exposed_over_nfs_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BOOLEAN, Fixnum, Hash)>] BOOLEAN data, response status code and response headers
    def is_share_exposed_over_nfs_post_with_http_info(is_share_exposed_over_nfs_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: NasApi.is_share_exposed_over_nfs_post ..."
      end
      # verify the required parameter 'is_share_exposed_over_nfs_param' is set
      if @api_client.config.client_side_validation && is_share_exposed_over_nfs_param.nil?
        fail ArgumentError, "Missing the required parameter 'is_share_exposed_over_nfs_param' when calling NasApi.is_share_exposed_over_nfs_post"
      end
      # resource path
      local_var_path = "/isShareExposedOverNFS"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(is_share_exposed_over_nfs_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BOOLEAN')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NasApi#is_share_exposed_over_nfs_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns whether the SMB protocol is enabled for the share
    # 
    # @param is_share_exposed_over_smb_param 
    # @param [Hash] opts the optional parameters
    # @return [BOOLEAN]
    def is_share_exposed_over_smb_post(is_share_exposed_over_smb_param, opts = {})
      data, _status_code, _headers = is_share_exposed_over_smb_post_with_http_info(is_share_exposed_over_smb_param, opts)
      return data
    end

    # Returns whether the SMB protocol is enabled for the share
    # 
    # @param is_share_exposed_over_smb_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BOOLEAN, Fixnum, Hash)>] BOOLEAN data, response status code and response headers
    def is_share_exposed_over_smb_post_with_http_info(is_share_exposed_over_smb_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: NasApi.is_share_exposed_over_smb_post ..."
      end
      # verify the required parameter 'is_share_exposed_over_smb_param' is set
      if @api_client.config.client_side_validation && is_share_exposed_over_smb_param.nil?
        fail ArgumentError, "Missing the required parameter 'is_share_exposed_over_smb_param' when calling NasApi.is_share_exposed_over_smb_post"
      end
      # resource path
      local_var_path = "/isShareExposedOverSMB"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(is_share_exposed_over_smb_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BOOLEAN')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NasApi#is_share_exposed_over_smb_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove All network ACLs from NFS Project
    # 
    # @param remove_all_nfs_network_ac_ls_on_project_param 
    # @param [Hash] opts the optional parameters
    # @return [COMMAND_STATUS]
    def remove_all_nfs_network_ac_ls_on_project_post(remove_all_nfs_network_ac_ls_on_project_param, opts = {})
      data, _status_code, _headers = remove_all_nfs_network_ac_ls_on_project_post_with_http_info(remove_all_nfs_network_ac_ls_on_project_param, opts)
      return data
    end

    # Remove All network ACLs from NFS Project
    # 
    # @param remove_all_nfs_network_ac_ls_on_project_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(COMMAND_STATUS, Fixnum, Hash)>] COMMAND_STATUS data, response status code and response headers
    def remove_all_nfs_network_ac_ls_on_project_post_with_http_info(remove_all_nfs_network_ac_ls_on_project_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: NasApi.remove_all_nfs_network_ac_ls_on_project_post ..."
      end
      # verify the required parameter 'remove_all_nfs_network_ac_ls_on_project_param' is set
      if @api_client.config.client_side_validation && remove_all_nfs_network_ac_ls_on_project_param.nil?
        fail ArgumentError, "Missing the required parameter 'remove_all_nfs_network_ac_ls_on_project_param' when calling NasApi.remove_all_nfs_network_ac_ls_on_project_post"
      end
      # resource path
      local_var_path = "/removeAllNFSNetworkACLsOnProject"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(remove_all_nfs_network_ac_ls_on_project_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'COMMAND_STATUS')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NasApi#remove_all_nfs_network_ac_ls_on_project_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove All network ACLs from NFS share
    # 
    # @param remove_all_nfs_network_ac_ls_on_share_param 
    # @param [Hash] opts the optional parameters
    # @return [COMMAND_STATUS]
    def remove_all_nfs_network_ac_ls_on_share_post(remove_all_nfs_network_ac_ls_on_share_param, opts = {})
      data, _status_code, _headers = remove_all_nfs_network_ac_ls_on_share_post_with_http_info(remove_all_nfs_network_ac_ls_on_share_param, opts)
      return data
    end

    # Remove All network ACLs from NFS share
    # 
    # @param remove_all_nfs_network_ac_ls_on_share_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(COMMAND_STATUS, Fixnum, Hash)>] COMMAND_STATUS data, response status code and response headers
    def remove_all_nfs_network_ac_ls_on_share_post_with_http_info(remove_all_nfs_network_ac_ls_on_share_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: NasApi.remove_all_nfs_network_ac_ls_on_share_post ..."
      end
      # verify the required parameter 'remove_all_nfs_network_ac_ls_on_share_param' is set
      if @api_client.config.client_side_validation && remove_all_nfs_network_ac_ls_on_share_param.nil?
        fail ArgumentError, "Missing the required parameter 'remove_all_nfs_network_ac_ls_on_share_param' when calling NasApi.remove_all_nfs_network_ac_ls_on_share_post"
      end
      # resource path
      local_var_path = "/removeAllNFSNetworkACLsOnShare"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(remove_all_nfs_network_ac_ls_on_share_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'COMMAND_STATUS')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NasApi#remove_all_nfs_network_ac_ls_on_share_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove network ACL from NFS Project
    # 
    # @param remove_nfs_network_acl_on_project_param 
    # @param [Hash] opts the optional parameters
    # @return [COMMAND_STATUS]
    def remove_nfs_network_acl_on_project_post(remove_nfs_network_acl_on_project_param, opts = {})
      data, _status_code, _headers = remove_nfs_network_acl_on_project_post_with_http_info(remove_nfs_network_acl_on_project_param, opts)
      return data
    end

    # Remove network ACL from NFS Project
    # 
    # @param remove_nfs_network_acl_on_project_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(COMMAND_STATUS, Fixnum, Hash)>] COMMAND_STATUS data, response status code and response headers
    def remove_nfs_network_acl_on_project_post_with_http_info(remove_nfs_network_acl_on_project_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: NasApi.remove_nfs_network_acl_on_project_post ..."
      end
      # verify the required parameter 'remove_nfs_network_acl_on_project_param' is set
      if @api_client.config.client_side_validation && remove_nfs_network_acl_on_project_param.nil?
        fail ArgumentError, "Missing the required parameter 'remove_nfs_network_acl_on_project_param' when calling NasApi.remove_nfs_network_acl_on_project_post"
      end
      # resource path
      local_var_path = "/removeNFSNetworkACLOnProject"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(remove_nfs_network_acl_on_project_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'COMMAND_STATUS')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NasApi#remove_nfs_network_acl_on_project_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove network ACL from NFS share
    # 
    # @param remove_nfs_network_acl_on_share_param 
    # @param [Hash] opts the optional parameters
    # @return [COMMAND_STATUS]
    def remove_nfs_network_acl_on_share_post(remove_nfs_network_acl_on_share_param, opts = {})
      data, _status_code, _headers = remove_nfs_network_acl_on_share_post_with_http_info(remove_nfs_network_acl_on_share_param, opts)
      return data
    end

    # Remove network ACL from NFS share
    # 
    # @param remove_nfs_network_acl_on_share_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(COMMAND_STATUS, Fixnum, Hash)>] COMMAND_STATUS data, response status code and response headers
    def remove_nfs_network_acl_on_share_post_with_http_info(remove_nfs_network_acl_on_share_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: NasApi.remove_nfs_network_acl_on_share_post ..."
      end
      # verify the required parameter 'remove_nfs_network_acl_on_share_param' is set
      if @api_client.config.client_side_validation && remove_nfs_network_acl_on_share_param.nil?
        fail ArgumentError, "Missing the required parameter 'remove_nfs_network_acl_on_share_param' when calling NasApi.remove_nfs_network_acl_on_share_post"
      end
      # resource path
      local_var_path = "/removeNFSNetworkACLOnShare"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(remove_nfs_network_acl_on_share_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'COMMAND_STATUS')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NasApi#remove_nfs_network_acl_on_share_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set the network ACLS on the NFS Project If the dataset contains any network ACLs, they will be removed as well.
    # 
    # @param set_nfs_network_ac_ls_on_project_param 
    # @param [Hash] opts the optional parameters
    # @return [COMMAND_STATUS]
    def set_nfs_network_ac_ls_on_project_post(set_nfs_network_ac_ls_on_project_param, opts = {})
      data, _status_code, _headers = set_nfs_network_ac_ls_on_project_post_with_http_info(set_nfs_network_ac_ls_on_project_param, opts)
      return data
    end

    # Set the network ACLS on the NFS Project If the dataset contains any network ACLs, they will be removed as well.
    # 
    # @param set_nfs_network_ac_ls_on_project_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(COMMAND_STATUS, Fixnum, Hash)>] COMMAND_STATUS data, response status code and response headers
    def set_nfs_network_ac_ls_on_project_post_with_http_info(set_nfs_network_ac_ls_on_project_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: NasApi.set_nfs_network_ac_ls_on_project_post ..."
      end
      # verify the required parameter 'set_nfs_network_ac_ls_on_project_param' is set
      if @api_client.config.client_side_validation && set_nfs_network_ac_ls_on_project_param.nil?
        fail ArgumentError, "Missing the required parameter 'set_nfs_network_ac_ls_on_project_param' when calling NasApi.set_nfs_network_ac_ls_on_project_post"
      end
      # resource path
      local_var_path = "/setNFSNetworkACLsOnProject"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(set_nfs_network_ac_ls_on_project_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'COMMAND_STATUS')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NasApi#set_nfs_network_ac_ls_on_project_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set the network ACLS on the NFS share. If the dataset contains any network ACLs, they will be removed as well.
    # 
    # @param set_nfs_network_ac_ls_on_share_param 
    # @param [Hash] opts the optional parameters
    # @return [COMMAND_STATUS]
    def set_nfs_network_ac_ls_on_share_post(set_nfs_network_ac_ls_on_share_param, opts = {})
      data, _status_code, _headers = set_nfs_network_ac_ls_on_share_post_with_http_info(set_nfs_network_ac_ls_on_share_param, opts)
      return data
    end

    # Set the network ACLS on the NFS share. If the dataset contains any network ACLs, they will be removed as well.
    # 
    # @param set_nfs_network_ac_ls_on_share_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(COMMAND_STATUS, Fixnum, Hash)>] COMMAND_STATUS data, response status code and response headers
    def set_nfs_network_ac_ls_on_share_post_with_http_info(set_nfs_network_ac_ls_on_share_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: NasApi.set_nfs_network_ac_ls_on_share_post ..."
      end
      # verify the required parameter 'set_nfs_network_ac_ls_on_share_param' is set
      if @api_client.config.client_side_validation && set_nfs_network_ac_ls_on_share_param.nil?
        fail ArgumentError, "Missing the required parameter 'set_nfs_network_ac_ls_on_share_param' when calling NasApi.set_nfs_network_ac_ls_on_share_post"
      end
      # resource path
      local_var_path = "/setNFSNetworkACLsOnShare"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(set_nfs_network_ac_ls_on_share_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'COMMAND_STATUS')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NasApi#set_nfs_network_ac_ls_on_share_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enable/Disable NFS protocol for a Project
    # 
    # @param set_nfs_sharing_on_project_param 
    # @param [Hash] opts the optional parameters
    # @return [COMMAND_STATUS]
    def set_nfs_sharing_on_project_post(set_nfs_sharing_on_project_param, opts = {})
      data, _status_code, _headers = set_nfs_sharing_on_project_post_with_http_info(set_nfs_sharing_on_project_param, opts)
      return data
    end

    # Enable/Disable NFS protocol for a Project
    # 
    # @param set_nfs_sharing_on_project_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(COMMAND_STATUS, Fixnum, Hash)>] COMMAND_STATUS data, response status code and response headers
    def set_nfs_sharing_on_project_post_with_http_info(set_nfs_sharing_on_project_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: NasApi.set_nfs_sharing_on_project_post ..."
      end
      # verify the required parameter 'set_nfs_sharing_on_project_param' is set
      if @api_client.config.client_side_validation && set_nfs_sharing_on_project_param.nil?
        fail ArgumentError, "Missing the required parameter 'set_nfs_sharing_on_project_param' when calling NasApi.set_nfs_sharing_on_project_post"
      end
      # resource path
      local_var_path = "/setNFSSharingOnProject"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(set_nfs_sharing_on_project_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'COMMAND_STATUS')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NasApi#set_nfs_sharing_on_project_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enable/Disable NFS protocol for a share. If the dataset contains any network ACLs, they will be removed as well.
    # 
    # @param set_nfs_sharing_on_share_param 
    # @param [Hash] opts the optional parameters
    # @return [COMMAND_STATUS]
    def set_nfs_sharing_on_share_post(set_nfs_sharing_on_share_param, opts = {})
      data, _status_code, _headers = set_nfs_sharing_on_share_post_with_http_info(set_nfs_sharing_on_share_param, opts)
      return data
    end

    # Enable/Disable NFS protocol for a share. If the dataset contains any network ACLs, they will be removed as well.
    # 
    # @param set_nfs_sharing_on_share_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(COMMAND_STATUS, Fixnum, Hash)>] COMMAND_STATUS data, response status code and response headers
    def set_nfs_sharing_on_share_post_with_http_info(set_nfs_sharing_on_share_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: NasApi.set_nfs_sharing_on_share_post ..."
      end
      # verify the required parameter 'set_nfs_sharing_on_share_param' is set
      if @api_client.config.client_side_validation && set_nfs_sharing_on_share_param.nil?
        fail ArgumentError, "Missing the required parameter 'set_nfs_sharing_on_share_param' when calling NasApi.set_nfs_sharing_on_share_post"
      end
      # resource path
      local_var_path = "/setNFSSharingOnShare"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(set_nfs_sharing_on_share_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'COMMAND_STATUS')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NasApi#set_nfs_sharing_on_share_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enable/Disable SMB protocol for a Project, If the dataset contains any network ACLs, they are removed as well.
    # 
    # @param set_smb_sharing_on_project_param 
    # @param [Hash] opts the optional parameters
    # @return [COMMAND_STATUS]
    def set_smb_sharing_on_project_post(set_smb_sharing_on_project_param, opts = {})
      data, _status_code, _headers = set_smb_sharing_on_project_post_with_http_info(set_smb_sharing_on_project_param, opts)
      return data
    end

    # Enable/Disable SMB protocol for a Project, If the dataset contains any network ACLs, they are removed as well.
    # 
    # @param set_smb_sharing_on_project_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(COMMAND_STATUS, Fixnum, Hash)>] COMMAND_STATUS data, response status code and response headers
    def set_smb_sharing_on_project_post_with_http_info(set_smb_sharing_on_project_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: NasApi.set_smb_sharing_on_project_post ..."
      end
      # verify the required parameter 'set_smb_sharing_on_project_param' is set
      if @api_client.config.client_side_validation && set_smb_sharing_on_project_param.nil?
        fail ArgumentError, "Missing the required parameter 'set_smb_sharing_on_project_param' when calling NasApi.set_smb_sharing_on_project_post"
      end
      # resource path
      local_var_path = "/setSMBSharingOnProject"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(set_smb_sharing_on_project_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'COMMAND_STATUS')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NasApi#set_smb_sharing_on_project_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enable/Disable SMB protocol for a share. If the dataset contains any network ACLs, they will be removed as well.
    # 
    # @param set_smb_sharing_on_share_param 
    # @param [Hash] opts the optional parameters
    # @return [COMMAND_STATUS]
    def set_smb_sharing_on_share_post(set_smb_sharing_on_share_param, opts = {})
      data, _status_code, _headers = set_smb_sharing_on_share_post_with_http_info(set_smb_sharing_on_share_param, opts)
      return data
    end

    # Enable/Disable SMB protocol for a share. If the dataset contains any network ACLs, they will be removed as well.
    # 
    # @param set_smb_sharing_on_share_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(COMMAND_STATUS, Fixnum, Hash)>] COMMAND_STATUS data, response status code and response headers
    def set_smb_sharing_on_share_post_with_http_info(set_smb_sharing_on_share_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: NasApi.set_smb_sharing_on_share_post ..."
      end
      # verify the required parameter 'set_smb_sharing_on_share_param' is set
      if @api_client.config.client_side_validation && set_smb_sharing_on_share_param.nil?
        fail ArgumentError, "Missing the required parameter 'set_smb_sharing_on_share_param' when calling NasApi.set_smb_sharing_on_share_post"
      end
      # resource path
      local_var_path = "/setSMBSharingOnShare"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(set_smb_sharing_on_share_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'COMMAND_STATUS')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NasApi#set_smb_sharing_on_share_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
