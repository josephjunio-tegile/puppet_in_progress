=begin
#Tegile IntelliFlassh WEB API

#WEB API for managing Tegile IntelliFlash Arrays.

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0-SNAPSHOT

=end

require "uri"

module IFClient
  class SANApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Associates an initiator with an initiator group.
    # Associates an initiator with an initiator group. If the initiator group is not present then this method attempts to create it.  If the initiator does not exist, then the method fails. 
    # @param add_initiator_to_initiator_group_param 
    # @param [Hash] opts the optional parameters
    # @return [COMMANDSTATUS]
    def add_initiator_to_initiator_group_post(add_initiator_to_initiator_group_param, opts = {})
      data, _status_code, _headers = add_initiator_to_initiator_group_post_with_http_info(add_initiator_to_initiator_group_param, opts)
      return data
    end

    # Associates an initiator with an initiator group.
    # Associates an initiator with an initiator group. If the initiator group is not present then this method attempts to create it.  If the initiator does not exist, then the method fails. 
    # @param add_initiator_to_initiator_group_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(COMMANDSTATUS, Fixnum, Hash)>] COMMANDSTATUS data, response status code and response headers
    def add_initiator_to_initiator_group_post_with_http_info(add_initiator_to_initiator_group_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SANApi.add_initiator_to_initiator_group_post ..."
      end
      # verify the required parameter 'add_initiator_to_initiator_group_param' is set
      if @api_client.config.client_side_validation && add_initiator_to_initiator_group_param.nil?
        fail ArgumentError, "Missing the required parameter 'add_initiator_to_initiator_group_param' when calling SANApi.add_initiator_to_initiator_group_post"
      end
      # resource path
      local_var_path = "/addInitiatorToInitiatorGroup"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(add_initiator_to_initiator_group_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'COMMANDSTATUS')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SANApi#add_initiator_to_initiator_group_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an FC Initiator
    # 
    # @param create_fc_initiator_param 
    # @param [Hash] opts the optional parameters
    # @return [COMMANDSTATUS]
    def create_fc_initiator_post(create_fc_initiator_param, opts = {})
      data, _status_code, _headers = create_fc_initiator_post_with_http_info(create_fc_initiator_param, opts)
      return data
    end

    # Create an FC Initiator
    # 
    # @param create_fc_initiator_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(COMMANDSTATUS, Fixnum, Hash)>] COMMANDSTATUS data, response status code and response headers
    def create_fc_initiator_post_with_http_info(create_fc_initiator_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SANApi.create_fc_initiator_post ..."
      end
      # verify the required parameter 'create_fc_initiator_param' is set
      if @api_client.config.client_side_validation && create_fc_initiator_param.nil?
        fail ArgumentError, "Missing the required parameter 'create_fc_initiator_param' when calling SANApi.create_fc_initiator_post"
      end
      # resource path
      local_var_path = "/createFCInitiator"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_fc_initiator_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'COMMANDSTATUS')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SANApi#create_fc_initiator_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates an initiator group on a Tegile array.
    # 
    # @param create_initiator_group_param 
    # @param [Hash] opts the optional parameters
    # @return [COMMANDSTATUS]
    def create_initiator_group_post(create_initiator_group_param, opts = {})
      data, _status_code, _headers = create_initiator_group_post_with_http_info(create_initiator_group_param, opts)
      return data
    end

    # Creates an initiator group on a Tegile array.
    # 
    # @param create_initiator_group_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(COMMANDSTATUS, Fixnum, Hash)>] COMMANDSTATUS data, response status code and response headers
    def create_initiator_group_post_with_http_info(create_initiator_group_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SANApi.create_initiator_group_post ..."
      end
      # verify the required parameter 'create_initiator_group_param' is set
      if @api_client.config.client_side_validation && create_initiator_group_param.nil?
        fail ArgumentError, "Missing the required parameter 'create_initiator_group_param' when calling SANApi.create_initiator_group_post"
      end
      # resource path
      local_var_path = "/createInitiatorGroup"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_initiator_group_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'COMMANDSTATUS')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SANApi#create_initiator_group_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates an iSCSI initiator object on the Tegile array. If the initiator name already exists, then the method fails.
    # 
    # @param create_iscsi_initiator_param IscsiInitiator_V1_0 that contains the name of the initiator and optional CHAP information
    # @param [Hash] opts the optional parameters
    # @return [COMMANDSTATUS]
    def create_iscsi_initiator_post(create_iscsi_initiator_param, opts = {})
      data, _status_code, _headers = create_iscsi_initiator_post_with_http_info(create_iscsi_initiator_param, opts)
      return data
    end

    # Creates an iSCSI initiator object on the Tegile array. If the initiator name already exists, then the method fails.
    # 
    # @param create_iscsi_initiator_param IscsiInitiator_V1_0 that contains the name of the initiator and optional CHAP information
    # @param [Hash] opts the optional parameters
    # @return [Array<(COMMANDSTATUS, Fixnum, Hash)>] COMMANDSTATUS data, response status code and response headers
    def create_iscsi_initiator_post_with_http_info(create_iscsi_initiator_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SANApi.create_iscsi_initiator_post ..."
      end
      # verify the required parameter 'create_iscsi_initiator_param' is set
      if @api_client.config.client_side_validation && create_iscsi_initiator_param.nil?
        fail ArgumentError, "Missing the required parameter 'create_iscsi_initiator_param' when calling SANApi.create_iscsi_initiator_post"
      end
      # resource path
      local_var_path = "/createIscsiInitiator"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_iscsi_initiator_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'COMMANDSTATUS')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SANApi#create_iscsi_initiator_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an iSCSI Target and add into specified Target Group
    # This is a simpler version of createIscsiTarget() api that has all the parameters for target creation. This api will default to the iSCSI network bindings associated with a target group. It will default to none (or no) chap authentication. It will allow the user to create a new iSCSI target with the user specified target suffix, alias and group name. 
    # @param create_iscsi_target_for_group_param 
    # @param [Hash] opts the optional parameters
    # @return [COMMANDSTATUS]
    def create_iscsi_target_for_group_post(create_iscsi_target_for_group_param, opts = {})
      data, _status_code, _headers = create_iscsi_target_for_group_post_with_http_info(create_iscsi_target_for_group_param, opts)
      return data
    end

    # Create an iSCSI Target and add into specified Target Group
    # This is a simpler version of createIscsiTarget() api that has all the parameters for target creation. This api will default to the iSCSI network bindings associated with a target group. It will default to none (or no) chap authentication. It will allow the user to create a new iSCSI target with the user specified target suffix, alias and group name. 
    # @param create_iscsi_target_for_group_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(COMMANDSTATUS, Fixnum, Hash)>] COMMANDSTATUS data, response status code and response headers
    def create_iscsi_target_for_group_post_with_http_info(create_iscsi_target_for_group_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SANApi.create_iscsi_target_for_group_post ..."
      end
      # verify the required parameter 'create_iscsi_target_for_group_param' is set
      if @api_client.config.client_side_validation && create_iscsi_target_for_group_param.nil?
        fail ArgumentError, "Missing the required parameter 'create_iscsi_target_for_group_param' when calling SANApi.create_iscsi_target_for_group_post"
      end
      # resource path
      local_var_path = "/createISCSITargetForGroup"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_iscsi_target_for_group_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'COMMANDSTATUS')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SANApi#create_iscsi_target_for_group_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an iSCSI Target
    # 
    # @param create_iscsi_target_param 
    # @param [Hash] opts the optional parameters
    # @return [COMMANDSTATUS]
    def create_iscsi_target_post(create_iscsi_target_param, opts = {})
      data, _status_code, _headers = create_iscsi_target_post_with_http_info(create_iscsi_target_param, opts)
      return data
    end

    # Create an iSCSI Target
    # 
    # @param create_iscsi_target_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(COMMANDSTATUS, Fixnum, Hash)>] COMMANDSTATUS data, response status code and response headers
    def create_iscsi_target_post_with_http_info(create_iscsi_target_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SANApi.create_iscsi_target_post ..."
      end
      # verify the required parameter 'create_iscsi_target_param' is set
      if @api_client.config.client_side_validation && create_iscsi_target_param.nil?
        fail ArgumentError, "Missing the required parameter 'create_iscsi_target_param' when calling SANApi.create_iscsi_target_post"
      end
      # resource path
      local_var_path = "/createISCSITarget"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_iscsi_target_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'COMMANDSTATUS')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SANApi#create_iscsi_target_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a project level default mapping
    # 
    # @param create_mapping_for_project_param 
    # @param [Hash] opts the optional parameters
    # @return [COMMANDSTATUS]
    def create_mapping_for_project_post(create_mapping_for_project_param, opts = {})
      data, _status_code, _headers = create_mapping_for_project_post_with_http_info(create_mapping_for_project_param, opts)
      return data
    end

    # Create a project level default mapping
    # 
    # @param create_mapping_for_project_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(COMMANDSTATUS, Fixnum, Hash)>] COMMANDSTATUS data, response status code and response headers
    def create_mapping_for_project_post_with_http_info(create_mapping_for_project_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SANApi.create_mapping_for_project_post ..."
      end
      # verify the required parameter 'create_mapping_for_project_param' is set
      if @api_client.config.client_side_validation && create_mapping_for_project_param.nil?
        fail ArgumentError, "Missing the required parameter 'create_mapping_for_project_param' when calling SANApi.create_mapping_for_project_post"
      end
      # resource path
      local_var_path = "/createMappingForProject"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_mapping_for_project_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'COMMANDSTATUS')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SANApi#create_mapping_for_project_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Maps a volume to an initiator group and a target group.
    # 
    # @param create_mapping_for_volume_param 
    # @param [Hash] opts the optional parameters
    # @return [COMMANDSTATUS]
    def create_mapping_for_volume_post(create_mapping_for_volume_param, opts = {})
      data, _status_code, _headers = create_mapping_for_volume_post_with_http_info(create_mapping_for_volume_param, opts)
      return data
    end

    # Maps a volume to an initiator group and a target group.
    # 
    # @param create_mapping_for_volume_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(COMMANDSTATUS, Fixnum, Hash)>] COMMANDSTATUS data, response status code and response headers
    def create_mapping_for_volume_post_with_http_info(create_mapping_for_volume_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SANApi.create_mapping_for_volume_post ..."
      end
      # verify the required parameter 'create_mapping_for_volume_param' is set
      if @api_client.config.client_side_validation && create_mapping_for_volume_param.nil?
        fail ArgumentError, "Missing the required parameter 'create_mapping_for_volume_param' when calling SANApi.create_mapping_for_volume_post"
      end
      # resource path
      local_var_path = "/createMappingForVolume"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_mapping_for_volume_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'COMMANDSTATUS')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SANApi#create_mapping_for_volume_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a target group with the specified target group name in the resource group containing the named pool with the intended protocol  
    # 
    # @param create_target_group_param 
    # @param [Hash] opts the optional parameters
    # @return [COMMANDSTATUS]
    def create_target_group_post(create_target_group_param, opts = {})
      data, _status_code, _headers = create_target_group_post_with_http_info(create_target_group_param, opts)
      return data
    end

    # Create a target group with the specified target group name in the resource group containing the named pool with the intended protocol  
    # 
    # @param create_target_group_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(COMMANDSTATUS, Fixnum, Hash)>] COMMANDSTATUS data, response status code and response headers
    def create_target_group_post_with_http_info(create_target_group_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SANApi.create_target_group_post ..."
      end
      # verify the required parameter 'create_target_group_param' is set
      if @api_client.config.client_side_validation && create_target_group_param.nil?
        fail ArgumentError, "Missing the required parameter 'create_target_group_param' when calling SANApi.create_target_group_post"
      end
      # resource path
      local_var_path = "/createTargetGroup"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_target_group_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'COMMANDSTATUS')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SANApi#create_target_group_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an Initiator Group
    # 
    # @param delete_initiator_group_param 
    # @param [Hash] opts the optional parameters
    # @return [COMMANDSTATUS]
    def delete_initiator_group_post(delete_initiator_group_param, opts = {})
      data, _status_code, _headers = delete_initiator_group_post_with_http_info(delete_initiator_group_param, opts)
      return data
    end

    # Delete an Initiator Group
    # 
    # @param delete_initiator_group_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(COMMANDSTATUS, Fixnum, Hash)>] COMMANDSTATUS data, response status code and response headers
    def delete_initiator_group_post_with_http_info(delete_initiator_group_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SANApi.delete_initiator_group_post ..."
      end
      # verify the required parameter 'delete_initiator_group_param' is set
      if @api_client.config.client_side_validation && delete_initiator_group_param.nil?
        fail ArgumentError, "Missing the required parameter 'delete_initiator_group_param' when calling SANApi.delete_initiator_group_post"
      end
      # resource path
      local_var_path = "/deleteInitiatorGroup"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(delete_initiator_group_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'COMMANDSTATUS')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SANApi#delete_initiator_group_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an iSCSI Initiator
    # 
    # @param delete_iscsi_initiator_param 
    # @param [Hash] opts the optional parameters
    # @return [COMMANDSTATUS]
    def delete_iscsi_initiator_post(delete_iscsi_initiator_param, opts = {})
      data, _status_code, _headers = delete_iscsi_initiator_post_with_http_info(delete_iscsi_initiator_param, opts)
      return data
    end

    # Delete an iSCSI Initiator
    # 
    # @param delete_iscsi_initiator_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(COMMANDSTATUS, Fixnum, Hash)>] COMMANDSTATUS data, response status code and response headers
    def delete_iscsi_initiator_post_with_http_info(delete_iscsi_initiator_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SANApi.delete_iscsi_initiator_post ..."
      end
      # verify the required parameter 'delete_iscsi_initiator_param' is set
      if @api_client.config.client_side_validation && delete_iscsi_initiator_param.nil?
        fail ArgumentError, "Missing the required parameter 'delete_iscsi_initiator_param' when calling SANApi.delete_iscsi_initiator_post"
      end
      # resource path
      local_var_path = "/deleteISCSIInitiator"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(delete_iscsi_initiator_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'COMMANDSTATUS')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SANApi#delete_iscsi_initiator_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an iSCSI Target
    # 
    # @param delete_iscsi_target_param 
    # @param [Hash] opts the optional parameters
    # @return [COMMANDSTATUS]
    def delete_iscsi_target_post(delete_iscsi_target_param, opts = {})
      data, _status_code, _headers = delete_iscsi_target_post_with_http_info(delete_iscsi_target_param, opts)
      return data
    end

    # Delete an iSCSI Target
    # 
    # @param delete_iscsi_target_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(COMMANDSTATUS, Fixnum, Hash)>] COMMANDSTATUS data, response status code and response headers
    def delete_iscsi_target_post_with_http_info(delete_iscsi_target_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SANApi.delete_iscsi_target_post ..."
      end
      # verify the required parameter 'delete_iscsi_target_param' is set
      if @api_client.config.client_side_validation && delete_iscsi_target_param.nil?
        fail ArgumentError, "Missing the required parameter 'delete_iscsi_target_param' when calling SANApi.delete_iscsi_target_post"
      end
      # resource path
      local_var_path = "/deleteISCSITarget"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(delete_iscsi_target_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'COMMANDSTATUS')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SANApi#delete_iscsi_target_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes the view (mapping) between the given project, initiator group, and target group.
    # 
    # @param delete_mapping_from_project_param 
    # @param [Hash] opts the optional parameters
    # @return [COMMANDSTATUS]
    def delete_mapping_from_project_post(delete_mapping_from_project_param, opts = {})
      data, _status_code, _headers = delete_mapping_from_project_post_with_http_info(delete_mapping_from_project_param, opts)
      return data
    end

    # Deletes the view (mapping) between the given project, initiator group, and target group.
    # 
    # @param delete_mapping_from_project_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(COMMANDSTATUS, Fixnum, Hash)>] COMMANDSTATUS data, response status code and response headers
    def delete_mapping_from_project_post_with_http_info(delete_mapping_from_project_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SANApi.delete_mapping_from_project_post ..."
      end
      # verify the required parameter 'delete_mapping_from_project_param' is set
      if @api_client.config.client_side_validation && delete_mapping_from_project_param.nil?
        fail ArgumentError, "Missing the required parameter 'delete_mapping_from_project_param' when calling SANApi.delete_mapping_from_project_post"
      end
      # resource path
      local_var_path = "/deleteMappingFromProject"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(delete_mapping_from_project_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'COMMANDSTATUS')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SANApi#delete_mapping_from_project_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes the view (mapping) between the given volume, initiator group, and target group.
    # 
    # @param delete_mapping_from_volume_param 
    # @param [Hash] opts the optional parameters
    # @return [COMMANDSTATUS]
    def delete_mapping_from_volume_post(delete_mapping_from_volume_param, opts = {})
      data, _status_code, _headers = delete_mapping_from_volume_post_with_http_info(delete_mapping_from_volume_param, opts)
      return data
    end

    # Deletes the view (mapping) between the given volume, initiator group, and target group.
    # 
    # @param delete_mapping_from_volume_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(COMMANDSTATUS, Fixnum, Hash)>] COMMANDSTATUS data, response status code and response headers
    def delete_mapping_from_volume_post_with_http_info(delete_mapping_from_volume_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SANApi.delete_mapping_from_volume_post ..."
      end
      # verify the required parameter 'delete_mapping_from_volume_param' is set
      if @api_client.config.client_side_validation && delete_mapping_from_volume_param.nil?
        fail ArgumentError, "Missing the required parameter 'delete_mapping_from_volume_param' when calling SANApi.delete_mapping_from_volume_post"
      end
      # resource path
      local_var_path = "/deleteMappingFromVolume"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(delete_mapping_from_volume_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'COMMANDSTATUS')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SANApi#delete_mapping_from_volume_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Target Group
    # 
    # @param delete_target_group_param 
    # @param [Hash] opts the optional parameters
    # @return [COMMANDSTATUS]
    def delete_target_group_post(delete_target_group_param, opts = {})
      data, _status_code, _headers = delete_target_group_post_with_http_info(delete_target_group_param, opts)
      return data
    end

    # Delete a Target Group
    # 
    # @param delete_target_group_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(COMMANDSTATUS, Fixnum, Hash)>] COMMANDSTATUS data, response status code and response headers
    def delete_target_group_post_with_http_info(delete_target_group_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SANApi.delete_target_group_post ..."
      end
      # verify the required parameter 'delete_target_group_param' is set
      if @api_client.config.client_side_validation && delete_target_group_param.nil?
        fail ArgumentError, "Missing the required parameter 'delete_target_group_param' when calling SANApi.delete_target_group_post"
      end
      # resource path
      local_var_path = "/deleteTargetGroup"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(delete_target_group_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'COMMANDSTATUS')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SANApi#delete_target_group_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the name of the initiator group to which the initiator belongs.
    # 
    # @param get_initiator_group_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<String>]
    def get_initiator_group_post(get_initiator_group_param, opts = {})
      data, _status_code, _headers = get_initiator_group_post_with_http_info(get_initiator_group_param, opts)
      return data
    end

    # Gets the name of the initiator group to which the initiator belongs.
    # 
    # @param get_initiator_group_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<String>, Fixnum, Hash)>] Array<String> data, response status code and response headers
    def get_initiator_group_post_with_http_info(get_initiator_group_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SANApi.get_initiator_group_post ..."
      end
      # verify the required parameter 'get_initiator_group_param' is set
      if @api_client.config.client_side_validation && get_initiator_group_param.nil?
        fail ArgumentError, "Missing the required parameter 'get_initiator_group_param' when calling SANApi.get_initiator_group_post"
      end
      # resource path
      local_var_path = "/getInitiatorGroup"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(get_initiator_group_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<String>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SANApi#get_initiator_group_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all of the default FC views of the project
    # 
    # @param get_project_default_fc_it_view_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<ITViewV21>]
    def get_project_default_fc_it_view_post(get_project_default_fc_it_view_param, opts = {})
      data, _status_code, _headers = get_project_default_fc_it_view_post_with_http_info(get_project_default_fc_it_view_param, opts)
      return data
    end

    # List all of the default FC views of the project
    # 
    # @param get_project_default_fc_it_view_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ITViewV21>, Fixnum, Hash)>] Array<ITViewV21> data, response status code and response headers
    def get_project_default_fc_it_view_post_with_http_info(get_project_default_fc_it_view_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SANApi.get_project_default_fc_it_view_post ..."
      end
      # verify the required parameter 'get_project_default_fc_it_view_param' is set
      if @api_client.config.client_side_validation && get_project_default_fc_it_view_param.nil?
        fail ArgumentError, "Missing the required parameter 'get_project_default_fc_it_view_param' when calling SANApi.get_project_default_fc_it_view_post"
      end
      # resource path
      local_var_path = "/getProjectDefaultFcITView"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(get_project_default_fc_it_view_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ITViewV21>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SANApi#get_project_default_fc_it_view_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all of the default iSCSI views of the project
    # 
    # @param get_project_default_iscsi_it_view_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<ITViewV21>]
    def get_project_default_iscsi_it_view_post(get_project_default_iscsi_it_view_param, opts = {})
      data, _status_code, _headers = get_project_default_iscsi_it_view_post_with_http_info(get_project_default_iscsi_it_view_param, opts)
      return data
    end

    # List all of the default iSCSI views of the project
    # 
    # @param get_project_default_iscsi_it_view_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ITViewV21>, Fixnum, Hash)>] Array<ITViewV21> data, response status code and response headers
    def get_project_default_iscsi_it_view_post_with_http_info(get_project_default_iscsi_it_view_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SANApi.get_project_default_iscsi_it_view_post ..."
      end
      # verify the required parameter 'get_project_default_iscsi_it_view_param' is set
      if @api_client.config.client_side_validation && get_project_default_iscsi_it_view_param.nil?
        fail ArgumentError, "Missing the required parameter 'get_project_default_iscsi_it_view_param' when calling SANApi.get_project_default_iscsi_it_view_post"
      end
      # resource path
      local_var_path = "/getProjectDefaultIscsiITView"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(get_project_default_iscsi_it_view_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ITViewV21>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SANApi#get_project_default_iscsi_it_view_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all of the existing views of the volume
    # 
    # @param get_volume_it_view_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<ITViewV21>]
    def get_volume_it_view_post(get_volume_it_view_param, opts = {})
      data, _status_code, _headers = get_volume_it_view_post_with_http_info(get_volume_it_view_param, opts)
      return data
    end

    # List all of the existing views of the volume
    # 
    # @param get_volume_it_view_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ITViewV21>, Fixnum, Hash)>] Array<ITViewV21> data, response status code and response headers
    def get_volume_it_view_post_with_http_info(get_volume_it_view_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SANApi.get_volume_it_view_post ..."
      end
      # verify the required parameter 'get_volume_it_view_param' is set
      if @api_client.config.client_side_validation && get_volume_it_view_param.nil?
        fail ArgumentError, "Missing the required parameter 'get_volume_it_view_param' when calling SANApi.get_volume_it_view_post"
      end
      # resource path
      local_var_path = "/getVolumeITView"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(get_volume_it_view_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ITViewV21>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SANApi#get_volume_it_view_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Checks if an initiator group exists on the Tegile array.
    # 
    # @param initiator_group_exists_param 
    # @param [Hash] opts the optional parameters
    # @return [BOOLEAN]
    def initiator_group_exists_post(initiator_group_exists_param, opts = {})
      data, _status_code, _headers = initiator_group_exists_post_with_http_info(initiator_group_exists_param, opts)
      return data
    end

    # Checks if an initiator group exists on the Tegile array.
    # 
    # @param initiator_group_exists_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BOOLEAN, Fixnum, Hash)>] BOOLEAN data, response status code and response headers
    def initiator_group_exists_post_with_http_info(initiator_group_exists_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SANApi.initiator_group_exists_post ..."
      end
      # verify the required parameter 'initiator_group_exists_param' is set
      if @api_client.config.client_side_validation && initiator_group_exists_param.nil?
        fail ArgumentError, "Missing the required parameter 'initiator_group_exists_param' when calling SANApi.initiator_group_exists_post"
      end
      # resource path
      local_var_path = "/initiatorGroupExists"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(initiator_group_exists_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BOOLEAN')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SANApi#initiator_group_exists_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists the names of all Fibre Channel initiator groups created on a Tegile array.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<String>]
    def list_fc_initiator_groups_get(opts = {})
      data, _status_code, _headers = list_fc_initiator_groups_get_with_http_info(opts)
      return data
    end

    # Lists the names of all Fibre Channel initiator groups created on a Tegile array.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<String>, Fixnum, Hash)>] Array<String> data, response status code and response headers
    def list_fc_initiator_groups_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SANApi.list_fc_initiator_groups_get ..."
      end
      # resource path
      local_var_path = "/listFCInitiatorGroups"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<String>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SANApi#list_fc_initiator_groups_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Fibre Channel Initiators with name matching specified pattern
    # 
    # @param list_fc_initiators_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<FCInitiatorV21>]
    def list_fc_initiators_post(list_fc_initiators_param, opts = {})
      data, _status_code, _headers = list_fc_initiators_post_with_http_info(list_fc_initiators_param, opts)
      return data
    end

    # List Fibre Channel Initiators with name matching specified pattern
    # 
    # @param list_fc_initiators_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<FCInitiatorV21>, Fixnum, Hash)>] Array<FCInitiatorV21> data, response status code and response headers
    def list_fc_initiators_post_with_http_info(list_fc_initiators_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SANApi.list_fc_initiators_post ..."
      end
      # verify the required parameter 'list_fc_initiators_param' is set
      if @api_client.config.client_side_validation && list_fc_initiators_param.nil?
        fail ArgumentError, "Missing the required parameter 'list_fc_initiators_param' when calling SANApi.list_fc_initiators_post"
      end
      # resource path
      local_var_path = "/listFCInitiators"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(list_fc_initiators_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<FCInitiatorV21>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SANApi#list_fc_initiators_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists all Fibre Channel Target groups available on a Tegile array.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<String>]
    def list_fc_target_groups_get(opts = {})
      data, _status_code, _headers = list_fc_target_groups_get_with_http_info(opts)
      return data
    end

    # Lists all Fibre Channel Target groups available on a Tegile array.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<String>, Fixnum, Hash)>] Array<String> data, response status code and response headers
    def list_fc_target_groups_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SANApi.list_fc_target_groups_get ..."
      end
      # resource path
      local_var_path = "/listFCTargetGroups"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<String>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SANApi#list_fc_target_groups_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Fibre Channel Targets with name matching specified pattern
    # 
    # @param list_fc_targets_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<FCTargetV21>]
    def list_fc_targets_post(list_fc_targets_param, opts = {})
      data, _status_code, _headers = list_fc_targets_post_with_http_info(list_fc_targets_param, opts)
      return data
    end

    # List Fibre Channel Targets with name matching specified pattern
    # 
    # @param list_fc_targets_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<FCTargetV21>, Fixnum, Hash)>] Array<FCTargetV21> data, response status code and response headers
    def list_fc_targets_post_with_http_info(list_fc_targets_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SANApi.list_fc_targets_post ..."
      end
      # verify the required parameter 'list_fc_targets_param' is set
      if @api_client.config.client_side_validation && list_fc_targets_param.nil?
        fail ArgumentError, "Missing the required parameter 'list_fc_targets_param' when calling SANApi.list_fc_targets_post"
      end
      # resource path
      local_var_path = "/listFCTargets"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(list_fc_targets_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<FCTargetV21>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SANApi#list_fc_targets_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all initiator groups available on IntelliFlash Array
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<InitiatorGroupV21>]
    def list_initiator_groups_get(opts = {})
      data, _status_code, _headers = list_initiator_groups_get_with_http_info(opts)
      return data
    end

    # List all initiator groups available on IntelliFlash Array
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<InitiatorGroupV21>, Fixnum, Hash)>] Array<InitiatorGroupV21> data, response status code and response headers
    def list_initiator_groups_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SANApi.list_initiator_groups_get ..."
      end
      # resource path
      local_var_path = "/listInitiatorGroups"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<InitiatorGroupV21>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SANApi#list_initiator_groups_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists all initiators belonging to the specified initiator group.
    # 
    # @param list_initiators_in_initiator_group_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<String>]
    def list_initiators_in_initiator_group_post(list_initiators_in_initiator_group_param, opts = {})
      data, _status_code, _headers = list_initiators_in_initiator_group_post_with_http_info(list_initiators_in_initiator_group_param, opts)
      return data
    end

    # Lists all initiators belonging to the specified initiator group.
    # 
    # @param list_initiators_in_initiator_group_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<String>, Fixnum, Hash)>] Array<String> data, response status code and response headers
    def list_initiators_in_initiator_group_post_with_http_info(list_initiators_in_initiator_group_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SANApi.list_initiators_in_initiator_group_post ..."
      end
      # verify the required parameter 'list_initiators_in_initiator_group_param' is set
      if @api_client.config.client_side_validation && list_initiators_in_initiator_group_param.nil?
        fail ArgumentError, "Missing the required parameter 'list_initiators_in_initiator_group_param' when calling SANApi.list_initiators_in_initiator_group_post"
      end
      # resource path
      local_var_path = "/listInitiatorsInInitiatorGroup"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(list_initiators_in_initiator_group_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<String>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SANApi#list_initiators_in_initiator_group_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists all the iSCSI initiator groups available on a Tegile array.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<String>]
    def list_iscsi_initiator_groups_get(opts = {})
      data, _status_code, _headers = list_iscsi_initiator_groups_get_with_http_info(opts)
      return data
    end

    # Lists all the iSCSI initiator groups available on a Tegile array.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<String>, Fixnum, Hash)>] Array<String> data, response status code and response headers
    def list_iscsi_initiator_groups_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SANApi.list_iscsi_initiator_groups_get ..."
      end
      # resource path
      local_var_path = "/listISCSIInitiatorGroups"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<String>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SANApi#list_iscsi_initiator_groups_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List iSCSI Initiators with name matching specified pattern
    # 
    # @param list_iscsi_initiators_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<ISCSIInitiatorV21>]
    def list_iscsi_initiators_post(list_iscsi_initiators_param, opts = {})
      data, _status_code, _headers = list_iscsi_initiators_post_with_http_info(list_iscsi_initiators_param, opts)
      return data
    end

    # List iSCSI Initiators with name matching specified pattern
    # 
    # @param list_iscsi_initiators_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ISCSIInitiatorV21>, Fixnum, Hash)>] Array<ISCSIInitiatorV21> data, response status code and response headers
    def list_iscsi_initiators_post_with_http_info(list_iscsi_initiators_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SANApi.list_iscsi_initiators_post ..."
      end
      # verify the required parameter 'list_iscsi_initiators_param' is set
      if @api_client.config.client_side_validation && list_iscsi_initiators_param.nil?
        fail ArgumentError, "Missing the required parameter 'list_iscsi_initiators_param' when calling SANApi.list_iscsi_initiators_post"
      end
      # resource path
      local_var_path = "/listISCSIInitiators"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(list_iscsi_initiators_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ISCSIInitiatorV21>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SANApi#list_iscsi_initiators_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists all the iSCSI target groups available on a Tegile array.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<String>]
    def list_iscsi_target_groups_get(opts = {})
      data, _status_code, _headers = list_iscsi_target_groups_get_with_http_info(opts)
      return data
    end

    # Lists all the iSCSI target groups available on a Tegile array.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<String>, Fixnum, Hash)>] Array<String> data, response status code and response headers
    def list_iscsi_target_groups_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SANApi.list_iscsi_target_groups_get ..."
      end
      # resource path
      local_var_path = "/listISCSITargetGroups"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<String>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SANApi#list_iscsi_target_groups_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List iSCSI Targets with name matching specified pattern
    # 
    # @param list_iscsi_targets_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<ISCSITargetV21>]
    def list_iscsi_targets_post(list_iscsi_targets_param, opts = {})
      data, _status_code, _headers = list_iscsi_targets_post_with_http_info(list_iscsi_targets_param, opts)
      return data
    end

    # List iSCSI Targets with name matching specified pattern
    # 
    # @param list_iscsi_targets_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ISCSITargetV21>, Fixnum, Hash)>] Array<ISCSITargetV21> data, response status code and response headers
    def list_iscsi_targets_post_with_http_info(list_iscsi_targets_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SANApi.list_iscsi_targets_post ..."
      end
      # verify the required parameter 'list_iscsi_targets_param' is set
      if @api_client.config.client_side_validation && list_iscsi_targets_param.nil?
        fail ArgumentError, "Missing the required parameter 'list_iscsi_targets_param' when calling SANApi.list_iscsi_targets_post"
      end
      # resource path
      local_var_path = "/listISCSITargets"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(list_iscsi_targets_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ISCSITargetV21>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SANApi#list_iscsi_targets_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists all targets associated with the target group.
    # 
    # @param list_targets_in_target_group_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<String>]
    def list_targets_in_target_group_post(list_targets_in_target_group_param, opts = {})
      data, _status_code, _headers = list_targets_in_target_group_post_with_http_info(list_targets_in_target_group_param, opts)
      return data
    end

    # Lists all targets associated with the target group.
    # 
    # @param list_targets_in_target_group_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<String>, Fixnum, Hash)>] Array<String> data, response status code and response headers
    def list_targets_in_target_group_post_with_http_info(list_targets_in_target_group_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SANApi.list_targets_in_target_group_post ..."
      end
      # verify the required parameter 'list_targets_in_target_group_param' is set
      if @api_client.config.client_side_validation && list_targets_in_target_group_param.nil?
        fail ArgumentError, "Missing the required parameter 'list_targets_in_target_group_param' when calling SANApi.list_targets_in_target_group_post"
      end
      # resource path
      local_var_path = "/listTargetsInTargetGroup"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(list_targets_in_target_group_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<String>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SANApi#list_targets_in_target_group_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Modify Alias of an iSCSI Target
    # 
    # @param param 
    # @param [Hash] opts the optional parameters
    # @return [COMMANDSTATUS]
    def modify_iscsi_target_alias_post(param, opts = {})
      data, _status_code, _headers = modify_iscsi_target_alias_post_with_http_info(param, opts)
      return data
    end

    # Modify Alias of an iSCSI Target
    # 
    # @param param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(COMMANDSTATUS, Fixnum, Hash)>] COMMANDSTATUS data, response status code and response headers
    def modify_iscsi_target_alias_post_with_http_info(param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SANApi.modify_iscsi_target_alias_post ..."
      end
      # verify the required parameter 'param' is set
      if @api_client.config.client_side_validation && param.nil?
        fail ArgumentError, "Missing the required parameter 'param' when calling SANApi.modify_iscsi_target_alias_post"
      end
      # resource path
      local_var_path = "/modifyISCSITargetAlias"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'COMMANDSTATUS')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SANApi#modify_iscsi_target_alias_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Move a target specified with targetName to a new target group specified with newTargetGroupName
    # 
    # @param move_target_to_target_group_param 
    # @param [Hash] opts the optional parameters
    # @return [COMMANDSTATUS]
    def move_target_to_target_group_post(move_target_to_target_group_param, opts = {})
      data, _status_code, _headers = move_target_to_target_group_post_with_http_info(move_target_to_target_group_param, opts)
      return data
    end

    # Move a target specified with targetName to a new target group specified with newTargetGroupName
    # 
    # @param move_target_to_target_group_param 
    # @param [Hash] opts the optional parameters
    # @return [Array<(COMMANDSTATUS, Fixnum, Hash)>] COMMANDSTATUS data, response status code and response headers
    def move_target_to_target_group_post_with_http_info(move_target_to_target_group_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SANApi.move_target_to_target_group_post ..."
      end
      # verify the required parameter 'move_target_to_target_group_param' is set
      if @api_client.config.client_side_validation && move_target_to_target_group_param.nil?
        fail ArgumentError, "Missing the required parameter 'move_target_to_target_group_param' when calling SANApi.move_target_to_target_group_post"
      end
      # resource path
      local_var_path = "/moveTargetToTargetGroup"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(move_target_to_target_group_param)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'COMMANDSTATUS')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SANApi#move_target_to_target_group_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
